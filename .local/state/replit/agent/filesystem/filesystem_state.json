{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        firago: [\"FiraGO\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-20px)\" },\n        },\n        glow: {\n          from: { boxShadow: \"0 0 20px rgba(34, 211, 238, 0.4)\" },\n          to: { boxShadow: \"0 0 30px rgba(34, 211, 238, 0.8)\" },\n        },\n        \"slide-up\": {\n          from: { \n            opacity: \"0\", \n            transform: \"translateY(30px)\" \n          },\n          to: { \n            opacity: \"1\", \n            transform: \"translateY(0)\" \n          },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 6s ease-in-out infinite\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        \"slide-up\": \"slide-up 0.6s ease-out\",\n        \"fade-in\": \"fade-in 0.8s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3641},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema, updateOrderSchema, type AttachedFile } from \"@shared/schema\";\nimport { sendOrderConfirmationEmail, sendOrderNotificationEmail } from \"./services/email\";\nimport { sendOrderNotificationToSlack } from \"./services/slack\";\nimport multer from \"multer\";\nimport path from \"path\";\n\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['.csv', '.json', '.pdf', '.png', '.jpg', '.jpeg'];\n    const ext = path.extname(file.originalname).toLowerCase();\n    if (allowedTypes.includes(ext)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Order management routes\n  app.post(\"/api/orders\", upload.array('files', 5), async (req, res) => {\n    try {\n      console.log('Request body:', req.body);\n      console.log('Request files:', req.files);\n      \n      // Parse JSON fields that come as strings from FormData\n      const parsedBody = { ...req.body };\n      if (parsedBody.integrations && typeof parsedBody.integrations === 'string') {\n        try {\n          parsedBody.integrations = JSON.parse(parsedBody.integrations);\n        } catch (e) {\n          console.error('Failed to parse integrations:', e);\n        }\n      }\n      if (parsedBody.hasCredentials && typeof parsedBody.hasCredentials === 'string') {\n        try {\n          parsedBody.hasCredentials = JSON.parse(parsedBody.hasCredentials);\n        } catch (e) {\n          console.error('Failed to parse hasCredentials:', e);\n        }\n      }\n      \n      const orderData = insertOrderSchema.parse(parsedBody);\n      \n      // Handle file uploads\n      const files = req.files as Express.Multer.File[];\n      const attachedFiles: AttachedFile[] = files?.map(file => ({\n        originalName: file.originalname,\n        filename: file.filename,\n        path: file.path,\n        size: file.size,\n        mimetype: file.mimetype\n      })) || [];\n\n      const order = await storage.createOrder({\n        ...orderData,\n        attachedFiles,\n      });\n\n      // Send notifications\n      try {\n        await Promise.all([\n          sendOrderConfirmationEmail(order.email, order.fullName, order.orderId),\n          sendOrderNotificationEmail(['svimonishvilitoka@gmail.com', 'giorginatsvlishvili2010@gmail.com'], order),\n          sendOrderNotificationToSlack(order)\n        ]);\n      } catch (notificationError) {\n        console.error('Notification error:', notificationError);\n        // Don't fail the order creation if notifications fail\n      }\n\n      res.json({ success: true, orderId: order.orderId });\n    } catch (error) {\n      console.error('Order creation error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Invalid order data' });\n    }\n  });\n\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch orders' });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch order' });\n    }\n  });\n\n  app.get(\"/api/orders/by-order-id/:orderId\", async (req, res) => {\n    try {\n      const order = await storage.getOrderByOrderId(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch order' });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const updates = updateOrderSchema.parse(req.body);\n      const order = await storage.updateOrder(req.params.id, updates);\n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Invalid update data' });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteOrder(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete order' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4838},"server/storage.ts":{"content":"import { type User, type InsertUser, type Order, type InsertOrder, type UpdateOrder } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Order management\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrderByOrderId(orderId: string): Promise<Order | undefined>;\n  getAllOrders(): Promise<Order[]>;\n  updateOrder(id: string, updates: UpdateOrder): Promise<Order | undefined>;\n  deleteOrder(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private orders: Map<string, Order>;\n\n  constructor() {\n    this.users = new Map();\n    this.orders = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const orderId = `ORD-${new Date().getFullYear()}-${String(this.orders.size + 1).padStart(4, '0')}`;\n    const now = new Date();\n    \n    const order: Order = {\n      ...insertOrder,\n      id,\n      orderId,\n      status: \"new\" as const,\n      adminNotes: null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrderByOrderId(orderId: string): Promise<Order | undefined> {\n    return Array.from(this.orders.values()).find(\n      (order) => order.orderId === orderId,\n    );\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).sort(\n      (a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async updateOrder(id: string, updates: UpdateOrder): Promise<Order | undefined> {\n    const existingOrder = this.orders.get(id);\n    if (!existingOrder) return undefined;\n\n    const updatedOrder: Order = {\n      ...existingOrder,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async deleteOrder(id: string): Promise<boolean> {\n    return this.orders.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2776},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define interface for attached files\nexport interface AttachedFile {\n  originalName: string;\n  filename: string;\n  path: string;\n  size: number;\n  mimetype: string;\n}\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const orderStatusEnum = pgEnum(\"order_status\", [\n  \"new\",\n  \"in_review\", \n  \"in_progress\",\n  \"delivered\",\n  \"closed\"\n]);\n\nexport const automationTypeEnum = pgEnum(\"automation_type\", [\n  \"whatsapp_chatbot\",\n  \"crm_integration\", \n  \"email_automation\",\n  \"file_sync\",\n  \"custom_workflow\"\n]);\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: text(\"order_id\").notNull().unique(),\n  \n  // Step 1: Project basics\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  projectName: text(\"project_name\").notNull(),\n  \n  // Step 2: Automation type\n  automationType: automationTypeEnum(\"automation_type\").notNull(),\n  customDescription: text(\"custom_description\"),\n  \n  // Step 3: Integrations\n  integrations: text(\"integrations\").array(),\n  hasCredentials: jsonb(\"has_credentials\"),\n  \n  // Step 4: Files\n  attachedFiles: jsonb(\"attached_files\"),\n  exampleLink: text(\"example_link\"),\n  \n  // Step 5: Timeline\n  deliverySpeed: text(\"delivery_speed\"),\n  priorityNotes: text(\"priority_notes\"),\n  \n  // Admin fields\n  status: orderStatusEnum(\"status\").default(\"new\"),\n  adminNotes: text(\"admin_notes\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderId: true,\n  status: true,\n  adminNotes: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateOrderSchema = createInsertSchema(orders).pick({\n  status: true,\n  adminNotes: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type UpdateOrder = z.infer<typeof updateOrderSchema>;\n","size_bytes":2560},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Services from \"@/pages/services\";\nimport Order from \"@/pages/order\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Team from \"@/pages/team\";\nimport Admin from \"@/pages/admin\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/order\" component={Order} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/team\" component={Team} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <Header />\n          <Router />\n          <Footer />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1423},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=FiraGO:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 12px;\n  --background: hsl(215, 50%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(217, 91%, 35%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(262, 83%, 58%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 35%);\n  --chart-1: hsl(217, 91%, 35%);\n  --chart-2: hsl(262, 83%, 58%);\n  --chart-3: hsl(187, 85%, 53%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --font-sans: 'FiraGO', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(228, 9%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 45%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(262, 83%, 68%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 4%, 46%);\n  --accent: hsl(187, 85%, 63%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 62%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(207, 28%, 18%);\n  --ring: hsl(217, 91%, 35%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .glass-card {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .dark .glass-card {\n    background: rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .hero-bg {\n    background: linear-gradient(135deg, hsl(215, 50%, 98%) 0%, hsl(217, 32%, 96%) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .dark .hero-bg {\n    background: linear-gradient(135deg, hsl(222, 84%, 5%) 0%, hsl(220, 40%, 8%) 100%);\n  }\n\n  .workflow-animation {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.1;\n    z-index: 0;\n  }\n\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n  }\n\n  .dark .card-hover:hover {\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-slide-up {\n    animation: slide-up 0.6s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fade-in 0.8s ease-out;\n  }\n\n  .animate-on-scroll {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: all 0.6s ease-out;\n  }\n\n  .animate-on-scroll.visible {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes glow {\n  from { box-shadow: 0 0 20px rgba(34, 211, 238, 0.4); }\n  to { box-shadow: 0 0 30px rgba(34, 211, 238, 0.8); }\n}\n\n@keyframes slide-up {\n  from { \n    opacity: 0; \n    transform: translateY(30px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n","size_bytes":3856},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/email.ts":{"content":"import nodemailer from 'nodemailer';\n\nlet transporter: nodemailer.Transporter | null = null;\n\n// Initialize Gmail SMTP transporter\nif (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {\n  transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: process.env.GMAIL_USER,\n      pass: process.env.GMAIL_APP_PASSWORD,\n    },\n  });\n  console.log(\"Gmail email service initialized successfully\");\n} else {\n  console.warn(\"Gmail credentials not provided - email functionality will be disabled\");\n  console.warn(\"Required: GMAIL_USER (your gmail address) and GMAIL_APP_PASSWORD (app-specific password)\");\n}\n\ninterface EmailParams {\n  to: string | string[];\n  from?: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  attachments?: Array<{\n    filename: string;\n    path?: string;\n    content?: Buffer | string;\n    contentType?: string;\n  }>;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!transporter) {\n    console.warn('Email service not available - skipping email send');\n    return false;\n  }\n  \n  try {\n    const mailOptions: nodemailer.SendMailOptions = {\n      from: params.from || process.env.GMAIL_USER,\n      to: params.to,\n      subject: params.subject,\n    };\n    \n    if (params.text) {\n      mailOptions.text = params.text;\n    }\n    \n    if (params.html) {\n      mailOptions.html = params.html;\n    }\n\n    if (params.attachments) {\n      mailOptions.attachments = params.attachments;\n    }\n    \n    const info = await transporter.sendMail(mailOptions);\n    console.log('Email sent successfully:', info.messageId);\n    return true;\n  } catch (error) {\n    console.error('Gmail email error:', error);\n    return false;\n  }\n}\n\nexport async function sendOrderConfirmationEmail(\n  customerEmail: string,\n  customerName: string,\n  orderId: string\n): Promise<boolean> {\n  const georgianSubject = `შეკვეთის დადასტურება - ${orderId}`;\n  const georgianHtml = `\n    <h2>მადლობა შეკვეთისთვის!</h2>\n    <p>ძვირფასო ${customerName},</p>\n    <p>თქვენი შეკვეთა წარმატებით მიიღეს.</p>\n    <p><strong>შეკვეთის ID:</strong> ${orderId}</p>\n    <p>ჩვენ მალე დაგიკავშირდებით პროექტის დეტალების განსახილველად.</p>\n    <br>\n    <p>პატივისცემით,<br>n8n ავტომატიზაციის გუნდი</p>\n  `;\n\n  return sendEmail({\n    to: customerEmail,\n    from: process.env.GMAIL_USER,\n    subject: georgianSubject,\n    html: georgianHtml,\n  });\n}\n\nexport async function sendOrderNotificationEmail(\n  adminEmails: string | string[],\n  order: any\n): Promise<boolean> {\n  const subject = `🆕 ახალი შეკვეთა მიღებულია - ${order.orderId}`;\n  \n  // Helper function to format automation type\n  const formatAutomationType = (type: string) => {\n    const types: Record<string, string> = {\n      'whatsapp_chatbot': 'WhatsApp/Messenger ჩატბოტი',\n      'crm_integration': 'CRM ინტეგრაცია',\n      'email_automation': 'ელექტრონული ფოსტის ავტომატიზაცია',\n      'file_sync': 'ფაილების სინქრონიზაცია / ETL',\n      'custom_workflow': 'მორგებული Workflow'\n    };\n    return types[type] || type;\n  };\n\n  // Helper function to format delivery speed\n  const formatDeliverySpeed = (speed: string) => {\n    const speeds: Record<string, string> = {\n      'standard': 'სტანდარტული (7-14 დღე)',\n      'fast': 'სწრაფი (3-5 დღე)'\n    };\n    return speeds[speed] || speed;\n  };\n\n  // Helper function to format order status\n  const formatOrderStatus = (status: string) => {\n    const statuses: Record<string, {label: string, color: string}> = {\n      'new': {label: 'ახალი', color: '#28a745'},\n      'in_review': {label: 'განხილვაში', color: '#007bff'},\n      'in_progress': {label: 'მუშავდება', color: '#ffc107'},\n      'delivered': {label: 'მიწოდებული', color: '#17a2b8'},\n      'closed': {label: 'დახურული', color: '#6c757d'}\n    };\n    return statuses[status] || {label: status, color: '#6c757d'};\n  };\n\n  // Helper function to format credentials\n  const formatCredentials = (credentials: Record<string, boolean>) => {\n    if (!credentials || Object.keys(credentials).length === 0) {\n      return '<p style=\"color: #666;\">მონაცემები არ არის მითითებული</p>';\n    }\n    \n    return Object.entries(credentials).map(([integration, hasCredentials]) => `\n      <div style=\"background: #f8f9fa; padding: 8px; margin: 4px 0; border-radius: 4px; display: flex; justify-content: space-between;\">\n        <span><strong>${integration}:</strong></span>\n        <span style=\"color: ${hasCredentials ? '#28a745' : '#dc3545'};\">\n          ${hasCredentials ? '✅ აქვს' : '❌ არ აქვს'}\n        </span>\n      </div>\n    `).join('');\n  };\n\n  // Format attached files\n  const formatAttachedFiles = (files: any[]) => {\n    if (!files || files.length === 0) return '<p style=\"color: #666;\">ფაილები არ არის ატვირთული</p>';\n    \n    return files.map(file => `\n      <div style=\"background: #f8f9fa; padding: 8px; margin: 4px 0; border-radius: 4px; border-left: 3px solid #007bff;\">\n        <strong>${file.originalName}</strong><br>\n        <small style=\"color: #666;\">ზომა: ${(file.size / 1024 / 1024).toFixed(2)} MB | ტიპი: ${file.mimetype}</small>\n      </div>\n    `).join('');\n  };\n\n  // Format integrations\n  const formatIntegrations = (integrations: string[]) => {\n    if (!integrations || integrations.length === 0) return '<p style=\"color: #666;\">ინტეგრაციები არ არის არჩეული</p>';\n    \n    return integrations.map(integration => `\n      <span style=\"background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 12px; font-size: 12px; margin: 2px; display: inline-block;\">\n        ${integration}\n      </span>\n    `).join('');\n  };\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>ახალი შეკვეთა</title>\n    </head>\n    <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      \n      <!-- Header -->\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;\">\n        <h1 style=\"margin: 0; font-size: 24px;\">🆕 ახალი შეკვეთა მიღებულია</h1>\n        <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">შეკვეთის ID: <strong>${order.orderId}</strong></p>\n      </div>\n\n      <!-- Main Content -->\n      <div style=\"background: white; border: 1px solid #e0e0e0; border-top: none; border-radius: 0 0 10px 10px; padding: 30px;\">\n        \n        <!-- Customer Information -->\n        <section style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 8px;\">\n            👤 კლიენტის ინფორმაცია\n          </h2>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; width: 120px;\">სახელი:</td>\n              <td style=\"padding: 8px 0;\">${order.fullName}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold;\">ელფოსტა:</td>\n              <td style=\"padding: 8px 0;\"><a href=\"mailto:${order.email}\" style=\"color: #667eea;\">${order.email}</a></td>\n            </tr>\n            ${order.company ? `\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold;\">კომპანია:</td>\n              <td style=\"padding: 8px 0;\">${order.company}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </section>\n\n        <!-- Project Information -->\n        <section style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 8px;\">\n            🚀 პროექტის ინფორმაცია\n          </h2>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; width: 120px;\">პროექტი:</td>\n              <td style=\"padding: 8px 0;\"><strong>${order.projectName}</strong></td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold;\">ტიპი:</td>\n              <td style=\"padding: 8px 0;\">${formatAutomationType(order.automationType)}</td>\n            </tr>\n            ${order.customDescription ? `\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; vertical-align: top;\">აღწერილობა:</td>\n              <td style=\"padding: 8px 0; background: #f8f9fa; border-radius: 4px; padding: 12px;\">${order.customDescription}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </section>\n\n        <!-- Integrations -->\n        <section style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 8px;\">\n            🔗 ინტეგრაციები\n          </h2>\n          <div style=\"margin-top: 10px;\">\n            ${formatIntegrations(order.integrations || [])}\n          </div>\n          \n          <!-- Credentials Status -->\n          ${order.hasCredentials ? `\n          <div style=\"margin-top: 20px;\">\n            <h3 style=\"font-size: 16px; margin-bottom: 10px; color: #333;\">🔐 ინტეგრაციის მონაცემები:</h3>\n            ${formatCredentials(order.hasCredentials)}\n          </div>\n          ` : ''}\n        </section>\n\n        <!-- Files & Examples -->\n        <section style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 8px;\">\n            📁 ფაილები და მაგალითები\n          </h2>\n          <div style=\"margin-bottom: 15px;\">\n            <strong>ატვირთული ფაილები:</strong>\n            ${formatAttachedFiles(order.attachedFiles || [])}\n          </div>\n          ${order.exampleLink ? `\n          <div>\n            <strong>მაგალითის ლინკი:</strong><br>\n            <a href=\"${order.exampleLink}\" style=\"color: #667eea; word-break: break-all;\" target=\"_blank\">${order.exampleLink}</a>\n          </div>\n          ` : ''}\n        </section>\n\n        <!-- Timeline & Priority -->\n        <section style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #f0f0f0; padding-bottom: 8px;\">\n            ⏰ ვადები და პრიორიტეტი\n          </h2>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            ${order.deliverySpeed ? `\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; width: 120px;\">მიწოდების სიჩქარე:</td>\n              <td style=\"padding: 8px 0;\">${formatDeliverySpeed(order.deliverySpeed)}</td>\n            </tr>\n            ` : ''}\n            ${order.priorityNotes ? `\n            <tr>\n              <td style=\"padding: 8px 0; font-weight: bold; vertical-align: top;\">შენიშვნები:</td>\n              <td style=\"padding: 8px 0; background: #fff3cd; border-radius: 4px; padding: 12px; border-left: 4px solid #ffc107;\">${order.priorityNotes}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </section>\n\n        <!-- Order Metadata -->\n        <section style=\"margin-bottom: 30px; background: #f8f9fa; padding: 20px; border-radius: 8px;\">\n          <h2 style=\"color: #667eea; font-size: 18px; margin-bottom: 15px;\">\n            📋 შეკვეთის დეტალები\n          </h2>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold; width: 120px;\">სისტემის ID:</td>\n              <td style=\"padding: 4px 0; font-family: monospace; color: #667eea; font-size: 12px;\">${order.id}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold;\">შეკვეთის ID:</td>\n              <td style=\"padding: 4px 0; font-family: monospace; color: #667eea;\">${order.orderId}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold;\">შექმნის თარიღი:</td>\n              <td style=\"padding: 4px 0;\">${new Date(order.createdAt).toLocaleString('ka-GE')}</td>\n            </tr>\n            ${order.updatedAt && new Date(order.updatedAt).getTime() !== new Date(order.createdAt).getTime() ? `\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold;\">ბოლო განახლება:</td>\n              <td style=\"padding: 4px 0;\">${new Date(order.updatedAt).toLocaleString('ka-GE')}</td>\n            </tr>\n            ` : ''}\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold;\">სტატუსი:</td>\n              <td style=\"padding: 4px 0;\">\n                <span style=\"background: ${formatOrderStatus(order.status || 'new').color}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px;\">\n                  ${formatOrderStatus(order.status || 'new').label}\n                </span>\n              </td>\n            </tr>\n            ${order.adminNotes ? `\n            <tr>\n              <td style=\"padding: 4px 0; font-weight: bold; vertical-align: top;\">ადმინის შენიშვნები:</td>\n              <td style=\"padding: 4px 0; background: #fff3cd; border-radius: 4px; padding: 8px; border-left: 4px solid #ffc107; font-size: 14px;\">${order.adminNotes}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </section>\n\n        <!-- Action Button -->\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${process.env.REPLIT_DOMAINS?.split(',')[0] || 'http://localhost:5000'}/admin\" \n             style=\"background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; display: inline-block; font-weight: bold;\">\n            📊 ადმინ პანელში ნახვა\n          </a>\n        </div>\n\n        <!-- Footer -->\n        <div style=\"text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; color: #666; font-size: 14px;\">\n          <p>ეს ელფოსტა გაიგზავნა ავტომატურად n8n ავტომატიზაციის სისტემიდან</p>\n        </div>\n\n      </div>\n    </body>\n    </html>\n  `;\n\n  return sendEmail({\n    to: adminEmails,\n    from: process.env.GMAIL_USER,\n    subject,\n    html,\n  });\n}","size_bytes":15643},"server/services/slack.ts":{"content":"import { WebClient, type ChatPostMessageArguments } from \"@slack/web-api\";\n\nlet slack: WebClient | null = null;\n\nif (process.env.SLACK_BOT_TOKEN && process.env.SLACK_CHANNEL_ID) {\n  slack = new WebClient(process.env.SLACK_BOT_TOKEN);\n} else {\n  console.warn(\"Slack credentials not provided - Slack notifications will be disabled\");\n}\n\nexport async function sendSlackMessage(\n  message: ChatPostMessageArguments\n): Promise<string | undefined> {\n  if (!slack) {\n    console.warn('Slack service not available - skipping Slack message');\n    return undefined;\n  }\n  \n  try {\n    const response = await slack.chat.postMessage(message);\n    return response.ts;\n  } catch (error) {\n    console.error('Error sending Slack message:', error);\n    throw error;\n  }\n}\n\nexport async function sendOrderNotificationToSlack(order: any): Promise<void> {\n  if (!slack || !process.env.SLACK_CHANNEL_ID) {\n    console.warn('Slack service not available - skipping Slack notification');\n    return;\n  }\n  \n  const channel = process.env.SLACK_CHANNEL_ID;\n  \n  await sendSlackMessage({\n    channel,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: '*🆕 New Order Received*'\n        }\n      },\n      {\n        type: 'section',\n        fields: [\n          {\n            type: 'mrkdwn',\n            text: `*Order ID:*\\n${order.orderId}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Customer:*\\n${order.fullName}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Email:*\\n${order.email}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Project:*\\n${order.projectName}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Type:*\\n${order.automationType}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Created:*\\n${new Date(order.createdAt).toLocaleString()}`\n          }\n        ]\n      },\n      {\n        type: 'actions',\n        elements: [\n          {\n            type: 'button',\n            text: {\n              type: 'plain_text',\n              text: 'View in Admin'\n            },\n            url: `${process.env.REPLIT_DOMAINS?.split(',')[0] || 'http://localhost:5000'}/admin`\n          }\n        ]\n      }\n    ]\n  });\n}\n","size_bytes":2283},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/georgian-content.ts":{"content":"export const georgianContent = {\n  nav: {\n    home: \"მთავარი\",\n    services: \"სერვისები\", \n    order: \"შეკვეთა\",\n    about: \"ჩვენ შესახებ\",\n    team: \"გუნდი\",\n    contact: \"კონტაქტი\"\n  },\n  \n  hero: {\n    headline: \"შენი ბიზნესის ავტომატიზაცია — მარტივად, სწრაფად და პროფესიონალურად\",\n    subheadline: \"ჩვენ ვქმნით მორგებულ n8n ავტომატიზაციებს, რომლებიც ამცირებენ დროს და ზრდიან ეფექტურობას.\",\n    primaryCta: \"შეუკვეთე ახლა\",\n    secondaryCta: \"ნახე სერვისები\"\n  },\n\n  whyUs: {\n    title: \"რატომ აირჩიო ჩვენ?\",\n    subtitle: \"ჩვენ ვართ n8n-ის ექსპერტები საქართველოში და გვაქვს მდიდარი გამოცდილება ავტომატიზაციის სფეროში\",\n    cards: [\n      {\n        title: \"სწრაფი განხორციელება\",\n        description: \"ავტომატიზაციის პროექტები რაორი კვირის განმავლობაში\"\n      },\n      {\n        title: \"100% მორგებული\", \n        description: \"თითოეული ავტომატიზაცია თქვენი ბიზნესის საჭიროებებზეა მორგებული\"\n      },\n      {\n        title: \"24/7 მხარდაჭერა\",\n        description: \"მუდმივი ტექნიკური მხარდაჭერა და ავტომატიზაციების განახლება\"\n      }\n    ]\n  },\n\n  howItWorks: {\n    title: \"როგორ მუშაობს?\",\n    subtitle: \"სამი მარტივი ნაბიჯი თქვენი ბიზნესის ავტომატიზაციისთვის\",\n    steps: [\n      {\n        title: \"გაცნობა\",\n        description: \"ვისაუბრებთ თქვენს ბიზნეს პროცესებზე და ვადგენთ ავტომატიზაციის გეგმას\"\n      },\n      {\n        title: \"აგება\", \n        description: \"ვქმნით და ვტესტავთ n8n workflow-ებს თქვენი მოთხოვნების შესაბამისად\"\n      },\n      {\n        title: \"მიწოდება\",\n        description: \"ვახორციელებთ ავტომატიზაციას და ვუზრუნველყოფთ სრულ მხარდაჭერას\"\n      }\n    ]\n  },\n\n  services: {\n    title: \"ჩვენი სერვისები\",\n    subtitle: \"ფართო სპექტრის ავტომატიზაციის სერვისები თქვენი ბიზნესისთვის\",\n    filters: {\n      all: \"ყველა\",\n      messaging: \"მესენჯერები\",\n      crm: \"CRM\",\n      email: \"ელფოსტა\", \n      data: \"მონაცემები\"\n    },\n    items: [\n      {\n        title: \"Messenger / WhatsApp ჩატბოტები\",\n        description: \"ინტელექტუალური ჩატბოტები WhatsApp-ში კლიენტების მომსახურებისთვის\",\n        cta: \"გაიგე მეტი\"\n      },\n      {\n        title: \"CRM ინტეგრაციები\",\n        description: \"დაუკავშირეთ CRM სისტემები სხვა პლატფორმებთან ავტომატური სინქრონიზაციისთვის\",\n        cta: \"გაიგე მეტი\"\n      },\n      {\n        title: \"ელ. ფოსტების ავტომატიზაცია\",\n        description: \"ავტომატური ელფოსტის კამპანიები და პერსონალიზებული შეტყობინებები\",\n        cta: \"გაიგე მეტი\"\n      },\n      {\n        title: \"ფაილებისა და მონაცემების სინქრონიზაცია\",\n        description: \"Google Sheets, Airtable და სხვა პლატფორმების ავტომატური სინქრონიზაცია\",\n        cta: \"გაიგე მეტი\"\n      }\n    ]\n  },\n\n  order: {\n    title: \"შეუკვეთეთ ავტომატიზაცია\",\n    subtitle: \"შეავსეთ ფორმა და მიიღეთ პერსონალიზებული ღირებულება\",\n    success: \"შეკვეთა წარმატებით გაიგზავნა! ჩვენ მალე დაგიკავშირდებით.\",\n    successFollow: \"თქვენი შეკვეთის ID: {ORDER_ID}. შეტყობინება ელ.ფოსტაზე გაიგზავნა.\",\n    tooltips: {\n      whatsapp: \"WhatsApp ჩატბოტი ავტომატურად პასუხობს კლიენტების შეკითხვებს და ამუშავებს შეკვეთებს\",\n      crm: \"CRM ინტეგრაცია ავტომატურად სინქრონიზებს კლიენტების მონაცემებს სხვადასხვა პლატფორმებს შორის\",\n      email: \"ელფოსტის ავტომატიზაცია ქმნის პერსონალიზებულ კამპანიებს და ავტომატურ პასუხებს\",\n      fileSync: \"ფაილების სინქრონიზაცია ავტომატურად განაახლებს მონაცემებს სხვადასხვა სისტემებში\",\n      custom: \"მორგებული ავტომატიზაცია იქმნება თქვენი კონკრეტული საჭიროებების მიხედვით\"\n    }\n  },\n\n  about: {\n    title: \"ჩვენ შესახებ\",\n    subtitle: \"ჩვენ ვართ საქართველოს წამყვანი n8n ავტომატიზაციის კომპანია, რომელიც ეხმარება ბიზნესებს დროის დაზოგვაში და პროცესების ოპტიმიზაციაში\",\n    story: {\n      title: \"ჩვენი სტორი\",\n      text1: \"2022 წელს დავფუძნეთ ჩვენი კომპანია იდეით, რომ ყველა ბიზნესს უნდა ჰქონდეს წვდომა უმაღლესი ხარისხის ავტომატიზაციებზე. n8n პლატფორმის მეშვეობით ჩვენ დავრწმუნდით, რომ ავტომატიზაცია შეიძლება იყოს როგორც ძლიერი, ასევე მისაწვდომი.\",\n      text2: \"დღეისათვის ჩვენ ვემსახურებით 50+ კომპანიას საქართველოში და ვქმნით ავტომატიზაციებს, რომლებიც ზოგავს რამდენიმე ათეულ საათს თვეში თითოეული კლიენტისთვის.\"\n    },\n    team: {\n      title: \"ჩვენი გუნდი\",\n      mission: \"მისია\"\n    },\n    timeline: {\n      title: \"ჩვენი მიღწევები\"\n    }\n  },\n\n  contact: {\n    title: \"დაგვიკავშირდით\",\n    subtitle: \"მზად ვართ გავიგოთ თქვენი ავტომატიზაციის საჭიროებები და დავგიხმაროთ ბიზნესის გაუმჯობესებაში\",\n    office: \"ჩვენი ოფისი\",\n    phone: \"ტელეფონი\", \n    email: \"ელფოსტა\",\n    whatsapp: \"WhatsApp-ით დაგვიკავშირდით\",\n    workingHours: \"სამუშაო საათები: ორშ — პარ 09:00 — 18:00\"\n  },\n\n  footer: {\n    description: \"საქართველოს წამყვანი n8n ავტომატიზაციის კომპანია. ვეხმარებით ბიზნესებს პროცესების ოპტიმიზაციასა და ავტომატიზაციაში.\",\n    quickLinks: \"სწრაფი ლინკები\",\n    services: \"სერვისები\",\n    copyright: \"© 2024 n8n ავტომატიზაცია. ყველა უფლება დაცულია.\",\n    privacy: \"კონფიდენციალურობის პოლიტიკა\",\n    terms: \"მომსახურების პირობები\"\n  },\n\n  cta: {\n    title: \"მზად ხართ გაავტომატუროთ ბიზნესი?\",\n    subtitle: \"დაიწყეთ თქვენი ავტომატიზაციის მოგზაურობა დღესვე. მიიღეთ უფასო კონსულტაცია და შეიტყვეთ როგორ შეგიძლიათ დაზოგოთ დრო და რესურსები.\",\n    button: \"შეუკვეთე ახლავე\"\n  }\n};\n","size_bytes":10412},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  let headers: Record<string, string> = {};\n  let body: string | FormData | undefined;\n\n  if (data) {\n    if (data instanceof FormData) {\n      // For FormData, don't set Content-Type - let browser set it with boundary\n      body = data;\n    } else {\n      headers[\"Content-Type\"] = \"application/json\";\n      body = JSON.stringify(data);\n    }\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1639},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { georgianContent } from \"@/lib/georgian-content\";\n\nexport default function About() {\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    const observerOptions = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    };\n\n    observerRef.current = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    }, observerOptions);\n\n    document.querySelectorAll('.animate-on-scroll').forEach(el => {\n      observerRef.current?.observe(el);\n    });\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <main className=\"pt-20\">\n      {/* Header */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6 font-firago\">\n              {georgianContent.about.title}\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              {georgianContent.about.subtitle}\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Company Story */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"animate-on-scroll\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-8 md:p-12\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-6 font-firago\">\n                  {georgianContent.about.story.title}\n                </h2>\n                <div className=\"prose prose-lg max-w-none\">\n                  <p className=\"text-muted-foreground leading-relaxed mb-4 font-firago\">\n                    {georgianContent.about.story.text1}\n                  </p>\n                  <p className=\"text-muted-foreground leading-relaxed font-firago\">\n                    {georgianContent.about.story.text2}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              {georgianContent.about.team.title}\n            </h2>\n          </div>\n\n          <motion.div \n            className=\"grid md:grid-cols-2 gap-8 justify-center max-w-4xl mx-auto\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            {[\n              {\n                name: `თორნიკე სვიმონიშვილი`,\n                role: `n8n Developer & Co-Founder`,\n                description: `გამოცდილი დეველოპერი ავტომატიზაციისა და ღრუბლოვანი ტექნოლოგიების სფეროში`,\n                avatar: `თ`,\n                gradient: `from-primary to-secondary`\n              },\n              {\n                name: `გიორგი ნაცვლიშვილი`,\n                role: `Business Development & Co-Founder`,\n                description: `ექსპერტი ბიზნეს პროცესების ანალიზისა და ავტომატიზაციის სტრატეგიების შემუშავებაში`,\n                avatar: `გ`,\n                gradient: `from-secondary to-accent`\n              }\n            ].map((member, index) => (\n              <motion.div\n                key={index}\n                variants={itemVariants}\n                className=\"card-hover text-center group\"\n                whileHover={{ y: -8 }}\n                transition={{ duration: 0.3 }}\n              >\n                <Card className=\"glass-card\">\n                  <CardContent className=\"p-6\">\n                    <div className={`w-24 h-24 bg-gradient-to-r ${member.gradient} rounded-full flex items-center justify-center text-primary-foreground text-2xl font-bold mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                      {member.avatar}\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">\n                      {member.name}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4 font-firago\">\n                      {member.role}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground font-firago\">\n                      {member.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Company Timeline */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              {georgianContent.about.timeline.title}\n            </h2>\n          </div>\n\n          <div className=\"relative animate-on-scroll\">\n            {/* Timeline line */}\n            <div className=\"absolute left-1/2 transform -translate-x-1/2 w-0.5 h-full bg-border\"></div>\n            \n            {/* Timeline items */}\n            <div className=\"space-y-12\">\n              {[\n                {\n                  title: \"კომპანიის დაფუძნება\",\n                  date: \"2022 თებერვალი\",\n                  description: \"პირველი n8n ავტომატიზაციები საქართველოში\",\n                  color: \"bg-primary\",\n                  side: \"right\"\n                },\n                {\n                  title: \"10+ კლიენტი\",\n                  date: \"2022 ივლისი\", \n                  description: \"პირველი წარმატებული პროექტების დასრულება\",\n                  color: \"bg-secondary\",\n                  side: \"left\"\n                },\n                {\n                  title: \"50+ კლიენტი\",\n                  date: \"2024 იანვარი\",\n                  description: \"საქართველოს ყველაზე დიდი n8n კომპანია\",\n                  color: \"bg-accent\",\n                  side: \"right\"\n                }\n              ].map((item, index) => (\n                <motion.div\n                  key={index}\n                  className=\"relative flex items-center\"\n                  initial={{ opacity: 0, x: item.side === \"right\" ? 50 : -50 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.2 }}\n                  viewport={{ once: true }}\n                >\n                  {item.side === \"right\" ? (\n                    <>\n                      <div className=\"flex-1 pr-8\"></div>\n                      <div className={`w-4 h-4 ${item.color} rounded-full relative z-10`}></div>\n                      <div className=\"flex-1 text-left pl-8\">\n                        <Card className=\"glass-card\">\n                          <CardContent className=\"p-4\">\n                            <h4 className=\"font-semibold text-foreground font-firago\">{item.title}</h4>\n                            <p className=\"text-sm text-muted-foreground font-firago\">{item.date}</p>\n                            <p className=\"text-muted-foreground mt-1 font-firago\">{item.description}</p>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"flex-1 text-right pr-8\">\n                        <Card className=\"glass-card\">\n                          <CardContent className=\"p-4\">\n                            <h4 className=\"font-semibold text-foreground font-firago\">{item.title}</h4>\n                            <p className=\"text-sm text-muted-foreground font-firago\">{item.date}</p>\n                            <p className=\"text-muted-foreground mt-1 font-firago\">{item.description}</p>\n                          </CardContent>\n                        </Card>\n                      </div>\n                      <div className={`w-4 h-4 ${item.color} rounded-full relative z-10`}></div>\n                      <div className=\"flex-1 pl-8\"></div>\n                    </>\n                  )}\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":9840},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport OrderList from \"@/components/admin/order-list\";\nimport OrderDetail from \"@/components/admin/order-detail\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Loader2, Package, Clock, CheckCircle, XCircle } from \"lucide-react\";\n\nexport default function Admin() {\n  const [selectedOrderId, setSelectedOrderId] = useState<string | null>(null);\n\n  const { data: orders, isLoading } = useQuery({\n    queryKey: ['/api/orders'],\n  });\n\n  // Calculate stats\n  const stats = orders ? {\n    total: orders.length,\n    new: orders.filter((order: any) => order.status === 'new').length,\n    inProgress: orders.filter((order: any) => order.status === 'in_progress').length,\n    delivered: orders.filter((order: any) => order.status === 'delivered').length,\n    closed: orders.filter((order: any) => order.status === 'closed').length,\n  } : { total: 0, new: 0, inProgress: 0, delivered: 0, closed: 0 };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"pt-20 min-h-screen bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage orders and track project progress\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Package className=\"w-6 h-6 mx-auto mb-2 text-muted-foreground\" />\n              <div className=\"text-2xl font-bold text-foreground\">{stats.total}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Badge variant=\"secondary\" className=\"mb-2\">New</Badge>\n              <div className=\"text-2xl font-bold text-foreground\">{stats.new}</div>\n              <div className=\"text-sm text-muted-foreground\">New Orders</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Clock className=\"w-6 h-6 mx-auto mb-2 text-orange-500\" />\n              <div className=\"text-2xl font-bold text-foreground\">{stats.inProgress}</div>\n              <div className=\"text-sm text-muted-foreground\">In Progress</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <CheckCircle className=\"w-6 h-6 mx-auto mb-2 text-green-500\" />\n              <div className=\"text-2xl font-bold text-foreground\">{stats.delivered}</div>\n              <div className=\"text-sm text-muted-foreground\">Delivered</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <XCircle className=\"w-6 h-6 mx-auto mb-2 text-gray-500\" />\n              <div className=\"text-2xl font-bold text-foreground\">{stats.closed}</div>\n              <div className=\"text-sm text-muted-foreground\">Closed</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Orders List */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <OrderList \n                  orders={orders || []}\n                  onSelectOrder={setSelectedOrderId}\n                  selectedOrderId={selectedOrderId}\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Detail */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {selectedOrderId ? (\n                  <OrderDetail orderId={selectedOrderId} />\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Select an order to view details\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","size_bytes":4838},"client/src/pages/contact.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { georgianContent } from \"@/lib/georgian-content\";\nimport { MapPin, Phone, Mail, User } from \"lucide-react\";\nimport giorgiPhoto from \"@assets/WhatsApp Image 2025-08-01 at 23.37.17_17286ac2 (29)_1758894082230.jpg\";\nimport tornikePhoto from \"@assets/1755198503835_1758901441709.png\";\n\nexport default function Contact() {\n  const handleWhatsAppClick = () => {\n    window.open('https://wa.me/995599123456', '_blank');\n  };\n\n  return (\n    <main className=\"pt-20\">\n      {/* Header */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6 font-firago\">\n              {georgianContent.contact.title}\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              {georgianContent.contact.subtitle}\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Contact Content */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <motion.div\n              initial={{ opacity: 0, x: -30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n              className=\"space-y-8\"\n            >\n              {/* Office Info */}\n              <Card className=\"glass-card card-hover\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"w-6 h-6 text-primary-foreground\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2 font-firago\">\n                        {georgianContent.contact.office}\n                      </h3>\n                      <p className=\"text-muted-foreground font-firago\">\n                        თბილისი, საბურთალო<br/>\n                        ვაჟა-ფშაველას 33<br/>\n                        0162 თბილისი, საქართველო\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Phone Info */}\n              <Card className=\"glass-card card-hover\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-accent rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Phone className=\"w-6 h-6 text-primary-foreground\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2 font-firago\">\n                        {georgianContent.contact.phone}\n                      </h3>\n                      <p className=\"text-muted-foreground font-firago\">\n                        +995 599 123 456<br/>\n                        <span className=\"text-sm\">{georgianContent.contact.workingHours}</span>\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Email Info */}\n              <Card className=\"glass-card card-hover\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"w-6 h-6 text-primary-foreground\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2 font-firago\">\n                        {georgianContent.contact.email}\n                      </h3>\n                      <p className=\"text-muted-foreground font-firago\">\n                        info@n8n-georgia.com<br/>\n                        support@n8n-georgia.com\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* WhatsApp Button */}\n              <Button \n                onClick={handleWhatsAppClick}\n                className=\"w-full bg-green-500 hover:bg-green-600 text-white px-6 py-4 rounded-xl font-semibold transition-all duration-300 hover:scale-105 flex items-center justify-center space-x-3 font-firago\"\n                data-testid=\"button-whatsapp\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.106\"/>\n                </svg>\n                <span>{georgianContent.contact.whatsapp}</span>\n              </Button>\n            </motion.div>\n\n            {/* Map Container */}\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <Card className=\"glass-card h-full min-h-[500px]\">\n                <CardContent className=\"p-4 h-full\">\n                  <div className=\"w-full h-full bg-muted rounded-lg overflow-hidden\">\n                    {/* Google Maps Embed */}\n                    <iframe\n                      src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2978.123456789!2d44.7865!3d41.7151!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zNDHCsDQyJzU0LjQiTiA0NMKwNDcnMTEuNCJF!5e0!3m2!1sen!2sge!4v1234567890123!5m2!1sen!2sge\"\n                      width=\"100%\"\n                      height=\"100%\"\n                      style={{ border: 0, minHeight: '460px' }}\n                      allowFullScreen\n                      loading=\"lazy\"\n                      referrerPolicy=\"no-referrer-when-downgrade\"\n                      title=\"n8n ავტომატიზაცია - ოფისის მდებარეობა\"\n                      data-testid=\"google-maps\"\n                    ></iframe>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Team Members Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6 font-firago\">\n              ჩვენი გუნდი\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              გაიცანით ჩვენი გუნდის წევრები, რომლებიც მზად არიან დაგეხმარონ თქვენი ავტომატიზაციის საჭიროებებში\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 gap-8 justify-center max-w-4xl mx-auto\">\n            {/* Giorgi Natsvlishvili */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"glass-card card-hover h-full\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"mb-6\">\n                    <img \n                      src={giorgiPhoto} \n                      alt=\"გიორგი ნაცვლიშვილი\"\n                      className=\"w-32 h-32 rounded-full mx-auto object-cover border-4 border-primary/20\"\n                      data-testid=\"img-giorgi-photo\"\n                    />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">\n                    გიორგი ნაცვლიშვილი\n                  </h3>\n                  \n                  <div className=\"space-y-3 mt-4\">\n                    <div className=\"flex items-center justify-center space-x-3 text-muted-foreground\">\n                      <Phone className=\"w-4 h-4\" />\n                      <span className=\"font-firago\" data-testid=\"text-giorgi-phone\">574099951</span>\n                    </div>\n                    <div className=\"flex items-center justify-center space-x-3 text-muted-foreground\">\n                      <Mail className=\"w-4 h-4\" />\n                      <span className=\"font-firago text-sm\" data-testid=\"text-giorgi-email\">giorginatsvlishvili2010@gmail.com</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Tornike Svimonishvili */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"glass-card card-hover h-full\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"mb-6\">\n                    <img \n                      src={tornikePhoto} \n                      alt=\"თორნიკე სვიმონიშვილი\"\n                      className=\"w-32 h-32 rounded-full mx-auto object-cover border-4 border-primary/20\"\n                      data-testid=\"img-tornike-photo\"\n                    />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">\n                    თორნიკე სვიმონიშვილი\n                  </h3>\n                  \n                  <div className=\"space-y-3 mt-4\">\n                    <div className=\"flex items-center justify-center space-x-3 text-muted-foreground\">\n                      <Phone className=\"w-4 h-4\" />\n                      <span className=\"font-firago\" data-testid=\"text-tornike-phone\">574201221</span>\n                    </div>\n                    <div className=\"flex items-center justify-center space-x-3 text-muted-foreground\">\n                      <Mail className=\"w-4 h-4\" />\n                      <span className=\"font-firago text-sm\" data-testid=\"text-tornike-email\">svimonishvilitoka@gmail.com</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6 font-firago\">\n              მზად ხართ დაიწყოთ?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto font-firago\">\n              დაგვიკავშირდით დღესვე და მიიღეთ უფასო კონსულტაცია თქვენი ბიზნესის ავტომატიზაციისთვის.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"font-firago\" data-testid=\"button-start-project\">\n                პროექტის დაწყება\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"font-firago\" data-testid=\"button-consultation\">\n                უფასო კონსულტაცია\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":13985},"client/src/pages/home.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport WorkflowBackground from \"@/components/animations/workflow-bg\";\nimport { georgianContent } from \"@/lib/georgian-content\";\nimport { \n  Zap, \n  CheckCircle, \n  Clock, \n  MessageSquare, \n  Users, \n  Mail, \n  FileText,\n  Star\n} from \"lucide-react\";\n\nexport default function Home() {\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    const observerOptions = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    };\n\n    observerRef.current = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    }, observerOptions);\n\n    document.querySelectorAll('.animate-on-scroll').forEach(el => {\n      observerRef.current?.observe(el);\n    });\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <main>\n      {/* Hero Section */}\n      <section className=\"hero-bg relative min-h-screen flex items-center\">\n        <WorkflowBackground />\n        \n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 relative z-10\">\n          <motion.div \n            className=\"text-center\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            <motion.div variants={itemVariants}>\n              <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-foreground mb-6 leading-tight font-firago\">\n                გაავტომატურე<br/>\n                <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                  ბიზნეს პროცესები\n                </span>\n              </h1>\n              <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed font-firago\">\n                {georgianContent.hero.subheadline}\n              </p>\n            </motion.div>\n            \n            <motion.div \n              variants={itemVariants}\n              className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n            >\n              <Button asChild size=\"lg\" className=\"text-lg font-firago\" data-testid=\"button-order-hero\">\n                <Link href=\"/order\">\n                  {georgianContent.hero.primaryCta}\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"lg\" className=\"text-lg font-firago\" data-testid=\"button-services-hero\">\n                <Link href=\"/services\">\n                  {georgianContent.hero.secondaryCta}\n                </Link>\n              </Button>\n            </motion.div>\n\n            {/* Floating elements */}\n            <div className=\"absolute top-20 left-10 animate-float hidden lg:block\" style={{animationDelay: '1s'}}>\n              <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-accent rounded-xl opacity-20\"></div>\n            </div>\n            <div className=\"absolute top-40 right-20 animate-float hidden lg:block\" style={{animationDelay: '2s'}}>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-primary rounded-full opacity-30\"></div>\n            </div>\n            <div className=\"absolute bottom-40 left-1/4 animate-float hidden lg:block\" style={{animationDelay: '3s'}}>\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg opacity-25\"></div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Scroll indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"w-6 h-10 border-2 border-muted-foreground rounded-full flex justify-center\">\n            <div className=\"w-1 h-2 bg-muted-foreground rounded-full mt-2 animate-bounce\"></div>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Us Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              {georgianContent.whyUs.title}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto font-firago\">\n              {georgianContent.whyUs.subtitle}\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {georgianContent.whyUs.cards.map((card, index) => (\n              <motion.div\n                key={index}\n                className=\"animate-on-scroll card-hover glass-card rounded-xl p-6 text-center group\"\n                style={{animationDelay: `${0.1 * (index + 1)}s`}}\n                whileHover={{ y: -8 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  {index === 0 && <Zap className=\"w-8 h-8 text-primary-foreground\" />}\n                  {index === 1 && <CheckCircle className=\"w-8 h-8 text-primary-foreground\" />}\n                  {index === 2 && <Clock className=\"w-8 h-8 text-primary-foreground\" />}\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">{card.title}</h3>\n                <p className=\"text-muted-foreground font-firago\">\n                  {card.description}\n                </p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              {georgianContent.howItWorks.title}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto font-firago\">\n              {georgianContent.howItWorks.subtitle}\n            </p>\n          </div>\n\n          {/* Timeline */}\n          <div className=\"relative\">\n            {/* Timeline line */}\n            <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-border transform -translate-y-1/2 hidden md:block\"></div>\n            <div className=\"absolute top-1/2 left-0 w-1/3 h-0.5 bg-primary transform -translate-y-1/2 hidden md:block animate-pulse\"></div>\n\n            <div className=\"grid md:grid-cols-3 gap-8 relative\">\n              {georgianContent.howItWorks.steps.map((step, index) => (\n                <div key={index} className=\"animate-on-scroll text-center\" style={{animationDelay: `${0.1 * (index + 1)}s`}}>\n                  <div className=\"relative\">\n                    <div className={`w-16 h-16 rounded-full flex items-center justify-center text-primary-foreground font-bold text-xl mx-auto mb-4 relative z-10 ${\n                      index === 0 ? 'bg-primary' : index === 1 ? 'bg-secondary' : 'bg-accent'\n                    }`}>\n                      {index + 1}\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">{step.title}</h3>\n                  <p className=\"text-muted-foreground font-firago\">\n                    {step.description}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Preview */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              {georgianContent.services.title}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto font-firago\">\n              {georgianContent.services.subtitle}\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {georgianContent.services.items.slice(0, 4).map((service, index) => (\n              <motion.div\n                key={index}\n                className=\"animate-on-scroll card-hover glass-card rounded-xl p-6 group\"\n                style={{animationDelay: `${0.1 * (index + 1)}s`}}\n                whileHover={{ y: -8 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  {index === 0 && <MessageSquare className=\"w-6 h-6 text-primary-foreground\" />}\n                  {index === 1 && <Users className=\"w-6 h-6 text-primary-foreground\" />}\n                  {index === 2 && <Mail className=\"w-6 h-6 text-primary-foreground\" />}\n                  {index === 3 && <FileText className=\"w-6 h-6 text-primary-foreground\" />}\n                </div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2 font-firago\">{service.title}</h3>\n                <p className=\"text-muted-foreground text-sm mb-4 font-firago\">\n                  {service.description}\n                </p>\n                <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80 font-medium transition-colors duration-200 p-0 h-auto font-firago\">\n                  {service.cta} →\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <Button asChild variant=\"outline\" size=\"lg\" className=\"font-firago\" data-testid=\"button-all-services\">\n              <Link href=\"/services\">\n                ყველა სერვისის ნახვა\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n              მომხმარებელთა გამოხმაურება\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto font-firago\">\n              ნახეთ რას ამბობენ ჩვენი კლიენტები ჩვენ შესახებ\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[\n              {\n                name: \"გიორგი მელაძე\",\n                role: \"CEO, TechStart\",\n                text: \"ჩვენმა ავტომატიზაციამ დაგვზოგა 10+ საათი კვირაში. CRM და WhatsApp ინტეგრაცია სრულყოფილია.\",\n                avatar: \"გ\"\n              },\n              {\n                name: \"ნინო ხარაბაძე\", \n                role: \"მარკეტინგის მენეჯერი\",\n                text: \"ელფოსტის ავტომატიზაციამ ჩვენი მარკეტინგის ეფექტურობა 300%-ით გაზარდა. შესანიშნავი მხარდაჭერა!\",\n                avatar: \"ნ\"\n              },\n              {\n                name: \"ლევან გიორგაძე\",\n                role: \"ბიზნეს ანალიტიკოსი\", \n                text: \"მონაცემების სინქრონიზაცია Google Sheets-თან ავტომატური გახდა. ეს არის ყველაზე საუკეთესო ინვესტიცია!\",\n                avatar: \"ლ\"\n              }\n            ].map((testimonial, index) => (\n              <motion.div\n                key={index}\n                className=\"animate-on-scroll card-hover glass-card rounded-xl p-6\"\n                style={{animationDelay: `${0.1 * (index + 1)}s`}}\n                whileHover={{ y: -8 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center text-primary-foreground font-semibold mr-4\">\n                    {testimonial.avatar}\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground font-firago\">{testimonial.name}</h4>\n                    <p className=\"text-sm text-muted-foreground font-firago\">{testimonial.role}</p>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground italic mb-4 font-firago\">\n                  \"{testimonial.text}\"\n                </p>\n                <div className=\"flex\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary via-secondary to-accent\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <div className=\"animate-on-scroll\">\n            <h2 className=\"text-3xl md:text-5xl font-bold text-primary-foreground mb-6 font-firago\">\n              {georgianContent.cta.title}\n            </h2>\n            <p className=\"text-xl text-primary-foreground/90 mb-8 max-w-2xl mx-auto font-firago\">\n              {georgianContent.cta.subtitle}\n            </p>\n            <Button asChild size=\"lg\" variant=\"secondary\" className=\"text-lg font-firago\" data-testid=\"button-order-cta\">\n              <Link href=\"/order\">\n                {georgianContent.cta.button}\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":15017},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/order.tsx":{"content":"import { motion } from \"framer-motion\";\nimport OrderWizard from \"@/components/order/order-wizard\";\nimport { georgianContent } from \"@/lib/georgian-content\";\n\nexport default function Order() {\n  return (\n    <main className=\"pt-20\">\n      {/* Order Section - Multi-step Wizard */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 min-h-screen relative overflow-hidden\">\n        {/* Background Animation */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0 opacity-10\">\n            <defs>\n              <pattern id=\"grid\" width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" className=\"text-muted/30\"/>\n          </svg>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 relative z-10\">\n          {/* Order Wizard Container */}\n          <motion.div \n            className=\"glass-card rounded-2xl p-8 md:p-12\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4 font-firago\">\n                {georgianContent.order.title}\n              </h1>\n              <p className=\"text-xl text-muted-foreground font-firago\">\n                {georgianContent.order.subtitle}\n              </p>\n            </div>\n\n            {/* Order Wizard */}\n            <OrderWizard />\n          </motion.div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":1830},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { georgianContent } from \"@/lib/georgian-content\";\nimport { \n  MessageSquare, \n  Users, \n  Mail, \n  FileText,\n  Webhook,\n  Settings,\n  Bot,\n  Database\n} from \"lucide-react\";\n\nexport default function Services() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n\n  const services = [\n    {\n      title: georgianContent.services.items[0].title,\n      description: georgianContent.services.items[0].description,\n      icon: MessageSquare,\n      category: \"messaging\",\n      detailedDescription: \"WhatsApp და Messenger ჩატბოტების შექმნა, რომლებიც ავტომატურად პასუხობენ კლიენტების შეკითხვებს, ამუშავებენ შეკვეთებს და აკეთებენ შეთავაზებებს.\",\n      features: [\n        \"24/7 ავტომატური პასუხები\",\n        \"მულტი-ენოვანი მხარდაჭერა\",\n        \"შეკვეთების დამუშავება\",\n        \"CRM ინტეგრაცია\",\n        \"ანალიტიკა და რეპორტები\"\n      ]\n    },\n    {\n      title: georgianContent.services.items[1].title,\n      description: georgianContent.services.items[1].description,\n      icon: Users,\n      category: \"crm\",\n      detailedDescription: \"CRM სისტემების დაკავშირება სხვადასხვა პლატფორმებთან, მონაცემების ავტომატური სინქრონიზაცია და workflow-ების ოპტიმიზაცია.\",\n      features: [\n        \"Real-time მონაცემების სინქრონიზაცია\",\n        \"მულტი-პლატფორმა ინტეგრაცია\",\n        \"ავტომატური კონტაქტების განახლება\",\n        \"Sales Pipeline ავტომატიზაცია\",\n        \"რეპორტინგი და ანალიტიკა\"\n      ]\n    },\n    {\n      title: georgianContent.services.items[2].title,\n      description: georgianContent.services.items[2].description,\n      icon: Mail,\n      category: \"email\",\n      detailedDescription: \"ელფოსტის მარკეტინგის კამპანიების ავტომატიზაცია, პერსონალიზებული შეტყობინებები და ტრიგერ-დაფუძნებული კომუნიკაცია.\",\n      features: [\n        \"დრაფტიარული კამპანიები\",\n        \"პერსონალიზაცია\",\n        \"A/B ტესტირება\",\n        \"ავტომატური Follow-up\",\n        \"კონვერტაციის ტრეკინგი\"\n      ]\n    },\n    {\n      title: georgianContent.services.items[3].title,\n      description: georgianContent.services.items[3].description,\n      icon: FileText,\n      category: \"data\",\n      detailedDescription: \"ფაილების და მონაცემების ავტომატური სინქრონიზაცია Google Sheets, Airtable, databases და სხვა სისტემებს შორის.\",\n      features: [\n        \"Real-time სინქრონიზაცია\",\n        \"მონაცემების ვალიდაცია\",\n        \"ერრორების შეტყობინებები\",\n        \"Backup და Recovery\",\n        \"მრავალი ფორმატის მხარდაჭერა\"\n      ]\n    },\n    {\n      title: \"Webhook ავტომატიზაცია\",\n      description: \"Real-time მონაცემების გადაცემა და ავტომატური პროცესების გააქტიურება\",\n      icon: Webhook,\n      category: \"data\",\n      detailedDescription: \"Webhook-ების მეშვეობით სისტემებს შორის რეალ-დროში მონაცემების გადაცემა და ავტომატური პროცესების ტრიგერი.\",\n      features: [\n        \"Real-time Event Handling\",\n        \"Secure Webhook Endpoints\",\n        \"Error Handling და Retry Logic\",\n        \"Payload Transformation\",\n        \"Monitoring და Logging\"\n      ]\n    },\n    {\n      title: \"მორგებული Workflow\",\n      description: \"სრულად კონფიგურირებადი ავტომატიზაციები თქვენი უნიკალური საჭიროებისთვის\",\n      icon: Settings,\n      category: \"custom\",\n      detailedDescription: \"სრულად მორგებული n8n workflow-ები, რომლებიც შექმნილია თქვენი ბიზნესის სპეციფიკური მოთხოვნების შესაბამისად.\",\n      features: [\n        \"კონსულტაცია და დაგეგმვა\",\n        \"მორგებული ლოგიკა\",\n        \"ინტეგრაცია ნებისმიერ API-სთან\",\n        \"ტესტირება და ოპტიმიზაცია\",\n        \"დოკუმენტაცია და ტრენინგი\"\n      ]\n    }\n  ];\n\n  const filters = [\n    { key: \"all\", label: georgianContent.services.filters.all },\n    { key: \"messaging\", label: georgianContent.services.filters.messaging },\n    { key: \"crm\", label: georgianContent.services.filters.crm },\n    { key: \"email\", label: georgianContent.services.filters.email },\n    { key: \"data\", label: georgianContent.services.filters.data },\n    { key: \"custom\", label: \"მორგებული\" }\n  ];\n\n  const filteredServices = activeFilter === \"all\" \n    ? services \n    : services.filter(service => service.category === activeFilter);\n\n  return (\n    <main className=\"pt-20\">\n      {/* Header */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6 font-firago\">\n              {georgianContent.services.title}\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              {georgianContent.services.subtitle}\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          {/* Service Filters */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {filters.map((filter) => (\n              <Button\n                key={filter.key}\n                variant={activeFilter === filter.key ? \"default\" : \"outline\"}\n                onClick={() => setActiveFilter(filter.key)}\n                className=\"font-firago\"\n                data-testid={`filter-${filter.key}`}\n              >\n                {filter.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Services Grid */}\n          <motion.div \n            className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n            layout\n          >\n            {filteredServices.map((service, index) => (\n              <motion.div\n                key={service.title}\n                layout\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                whileHover={{ y: -8 }}\n                className=\"card-hover glass-card rounded-xl p-6 group\"\n              >\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <service.icon className=\"w-6 h-6 text-primary-foreground\" />\n                </div>\n                \n                <Badge variant=\"secondary\" className=\"mb-3 font-firago\">\n                  {filters.find(f => f.key === service.category)?.label}\n                </Badge>\n\n                <h3 className=\"text-xl font-semibold text-foreground mb-2 font-firago\">\n                  {service.title}\n                </h3>\n                <p className=\"text-muted-foreground mb-4 font-firago\">\n                  {service.description}\n                </p>\n\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"text-primary hover:text-primary/80 font-medium transition-colors duration-200 p-0 h-auto font-firago\"\n                      data-testid={`button-learn-more-${index}`}\n                    >\n                      {georgianContent.services.items[0].cta} →\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle className=\"text-2xl font-bold font-firago\">\n                        {service.title}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-6\">\n                      <p className=\"text-muted-foreground font-firago\">\n                        {service.detailedDescription}\n                      </p>\n                      \n                      <div>\n                        <h4 className=\"font-semibold text-foreground mb-3 font-firago\">\n                          ძირითადი თვისებები:\n                        </h4>\n                        <ul className=\"space-y-2\">\n                          {service.features.map((feature, idx) => (\n                            <li key={idx} className=\"flex items-center text-muted-foreground font-firago\">\n                              <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                              {feature}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div className=\"flex gap-4 pt-4\">\n                        <Button className=\"font-firago\" data-testid={`button-order-${index}`}>\n                          შეკვეთის გაფორმება\n                        </Button>\n                        <Button variant=\"outline\" className=\"font-firago\">\n                          მეტი ინფორმაცია\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6 font-firago\">\n              ვერ იპოვეთ რასაც ეძებდით?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto font-firago\">\n              ჩვენ ვქმნით მორგებულ ავტომატიზაციებს ნებისმიერი სირთულის. მოგვწერეთ თქვენი საჭიროებების შესახებ.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"font-firago\" data-testid=\"button-custom-order\">\n                მორგებული შეკვეთა\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"font-firago\" data-testid=\"button-consultation\">\n                უფასო კონსულტაცია\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </main>\n  );\n}\n","size_bytes":13260},"client/src/components/admin/order-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Loader2, \n  User, \n  Mail, \n  Building, \n  Calendar, \n  FileText, \n  Download,\n  MessageSquare,\n  Clock,\n  ExternalLink\n} from \"lucide-react\";\nimport { formatDistance, format } from \"date-fns\";\n\ninterface OrderDetailProps {\n  orderId: string;\n}\n\nexport default function OrderDetail({ orderId }: OrderDetailProps) {\n  const [adminNotes, setAdminNotes] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: order, isLoading } = useQuery({\n    queryKey: ['/api/orders', orderId],\n    enabled: !!orderId,\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async (data: { status?: string; adminNotes?: string }) => {\n      return apiRequest(\"PATCH\", `/api/orders/${orderId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders', orderId] });\n      toast({\n        title: \"Success\",\n        description: \"Order updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (newStatus: string) => {\n    updateOrderMutation.mutate({ status: newStatus });\n  };\n\n  const handleNotesUpdate = () => {\n    updateOrderMutation.mutate({ adminNotes });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"w-6 h-6 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!order) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        Order not found\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\": return \"bg-blue-100 text-blue-800\";\n      case \"in_review\": return \"bg-yellow-100 text-yellow-800\";\n      case \"in_progress\": return \"bg-orange-100 text-orange-800\";\n      case \"delivered\": return \"bg-green-100 text-green-800\";\n      case \"closed\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"new\": return \"New\";\n      case \"in_review\": return \"In Review\";\n      case \"in_progress\": return \"In Progress\";\n      case \"delivered\": return \"Delivered\";\n      case \"closed\": return \"Closed\";\n      default: return status;\n    }\n  };\n\n  const getAutomationTypeLabel = (type: string) => {\n    switch (type) {\n      case \"whatsapp_chatbot\": return \"WhatsApp Chatbot\";\n      case \"crm_integration\": return \"CRM Integration\";\n      case \"email_automation\": return \"Email Automation\";\n      case \"file_sync\": return \"File Sync / ETL\";\n      case \"custom_workflow\": return \"Custom Workflow\";\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Order Header */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-lg\">{order.orderId}</h3>\n          <Badge className={getStatusColor(order.status)}>\n            {getStatusLabel(order.status)}\n          </Badge>\n        </div>\n        <p className=\"text-sm text-muted-foreground flex items-center gap-2\">\n          <Calendar className=\"w-4 h-4\" />\n          Created {formatDistance(new Date(order.createdAt), new Date(), { addSuffix: true })}\n          {order.updatedAt !== order.createdAt && (\n            <span>\n              • Updated {formatDistance(new Date(order.updatedAt), new Date(), { addSuffix: true })}\n            </span>\n          )}\n        </p>\n      </div>\n\n      <Separator />\n\n      {/* Customer Info */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <User className=\"w-4 h-4\" />\n          Customer Information\n        </h4>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-medium\">Name:</span>\n            {order.fullName}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Mail className=\"w-4 h-4 text-muted-foreground\" />\n            <a href={`mailto:${order.email}`} className=\"text-primary hover:underline\">\n              {order.email}\n            </a>\n          </div>\n          {order.company && (\n            <div className=\"flex items-center gap-2\">\n              <Building className=\"w-4 h-4 text-muted-foreground\" />\n              {order.company}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Project Details */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <FileText className=\"w-4 h-4\" />\n          Project Details\n        </h4>\n        <div className=\"space-y-2 text-sm\">\n          <div>\n            <span className=\"font-medium\">Project Name:</span><br />\n            {order.projectName}\n          </div>\n          <div>\n            <span className=\"font-medium\">Automation Type:</span><br />\n            {getAutomationTypeLabel(order.automationType)}\n          </div>\n          {order.customDescription && (\n            <div>\n              <span className=\"font-medium\">Custom Description:</span><br />\n              <div className=\"bg-muted p-2 rounded text-muted-foreground mt-1\">\n                {order.customDescription}\n              </div>\n            </div>\n          )}\n          {order.integrations && order.integrations.length > 0 && (\n            <div>\n              <span className=\"font-medium\">Integrations:</span><br />\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {order.integrations.map((integration: string, index: number) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {integration}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n          {order.deliverySpeed && (\n            <div>\n              <span className=\"font-medium\">Delivery Speed:</span><br />\n              {order.deliverySpeed === 'standard' ? 'Standard (7-14 days)' : 'Fast (3-5 days)'}\n            </div>\n          )}\n          {order.priorityNotes && (\n            <div>\n              <span className=\"font-medium\">Priority Notes:</span><br />\n              <div className=\"bg-muted p-2 rounded text-muted-foreground mt-1\">\n                {order.priorityNotes}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Files */}\n      {order.attachedFiles && order.attachedFiles.length > 0 && (\n        <>\n          <Separator />\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium flex items-center gap-2\">\n              <Download className=\"w-4 h-4\" />\n              Attached Files\n            </h4>\n            <div className=\"space-y-2\">\n              {order.attachedFiles.map((file: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                  <div className=\"flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">{file.originalName}</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {Math.round(file.size / 1024)}KB\n                    </Badge>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`download-file-${index}`}>\n                    <Download className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* External Links */}\n      {order.exampleLink && (\n        <>\n          <Separator />\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium flex items-center gap-2\">\n              <ExternalLink className=\"w-4 h-4\" />\n              External Links\n            </h4>\n            <div>\n              <a \n                href={order.exampleLink} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-primary hover:underline text-sm flex items-center gap-1\"\n                data-testid=\"external-link\"\n              >\n                {order.exampleLink}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            </div>\n          </div>\n        </>\n      )}\n\n      <Separator />\n\n      {/* Status Update */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium\">Update Status</h4>\n        <Select value={order.status} onValueChange={handleStatusUpdate}>\n          <SelectTrigger data-testid=\"select-order-status\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"new\">New</SelectItem>\n            <SelectItem value=\"in_review\">In Review</SelectItem>\n            <SelectItem value=\"in_progress\">In Progress</SelectItem>\n            <SelectItem value=\"delivered\">Delivered</SelectItem>\n            <SelectItem value=\"closed\">Closed</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Admin Notes */}\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium flex items-center gap-2\">\n          <MessageSquare className=\"w-4 h-4\" />\n          Admin Notes\n        </h4>\n        <Textarea\n          placeholder=\"Add internal notes about this order...\"\n          value={adminNotes || order.adminNotes || \"\"}\n          onChange={(e) => setAdminNotes(e.target.value)}\n          className=\"min-h-[100px]\"\n          data-testid=\"textarea-admin-notes\"\n        />\n        <Button\n          onClick={handleNotesUpdate}\n          disabled={updateOrderMutation.isPending}\n          size=\"sm\"\n          data-testid=\"button-save-notes\"\n        >\n          {updateOrderMutation.isPending ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            \"Save Notes\"\n          )}\n        </Button>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-2 pt-4\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={() => window.open(`mailto:${order.email}?subject=Your Order ${order.orderId}`, '_blank')}\n          data-testid=\"button-email-customer\"\n        >\n          <Mail className=\"w-4 h-4 mr-2\" />\n          Email Customer\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={() => {\n            const orderDetails = `Order ID: ${order.orderId}\\nCustomer: ${order.fullName}\\nProject: ${order.projectName}\\nStatus: ${getStatusLabel(order.status)}`;\n            navigator.clipboard.writeText(orderDetails);\n            toast({\n              title: \"Copied\",\n              description: \"Order details copied to clipboard\",\n            });\n          }}\n          data-testid=\"button-copy-details\"\n        >\n          Copy Details\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11752},"client/src/components/admin/order-list.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Search, Calendar, User, Building } from \"lucide-react\";\nimport { formatDistance } from \"date-fns\";\n\ninterface Order {\n  id: string;\n  orderId: string;\n  fullName: string;\n  email: string;\n  company?: string;\n  projectName: string;\n  automationType: string;\n  status: string;\n  createdAt: string;\n}\n\ninterface OrderListProps {\n  orders: Order[];\n  onSelectOrder: (orderId: string) => void;\n  selectedOrderId: string | null;\n}\n\nexport default function OrderList({ orders, onSelectOrder, selectedOrderId }: OrderListProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  // Filter and sort orders\n  const filteredOrders = orders\n    .filter(order => {\n      const matchesSearch = \n        order.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        order.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        order.orderId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        order.projectName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n      \n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"newest\":\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case \"oldest\":\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case \"name\":\n          return a.fullName.localeCompare(b.fullName);\n        default:\n          return 0;\n      }\n    });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\": return \"bg-blue-100 text-blue-800\";\n      case \"in_review\": return \"bg-yellow-100 text-yellow-800\";\n      case \"in_progress\": return \"bg-orange-100 text-orange-800\";\n      case \"delivered\": return \"bg-green-100 text-green-800\";\n      case \"closed\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"new\": return \"New\";\n      case \"in_review\": return \"In Review\";\n      case \"in_progress\": return \"In Progress\";\n      case \"delivered\": return \"Delivered\";\n      case \"closed\": return \"Closed\";\n      default: return status;\n    }\n  };\n\n  const getAutomationTypeLabel = (type: string) => {\n    switch (type) {\n      case \"whatsapp_chatbot\": return \"WhatsApp Bot\";\n      case \"crm_integration\": return \"CRM Integration\";\n      case \"email_automation\": return \"Email Automation\";\n      case \"file_sync\": return \"File Sync\";\n      case \"custom_workflow\": return \"Custom Workflow\";\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            placeholder=\"Search by name, email, order ID, or project...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-orders\"\n          />\n        </div>\n        \n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"new\">New</SelectItem>\n            <SelectItem value=\"in_review\">In Review</SelectItem>\n            <SelectItem value=\"in_progress\">In Progress</SelectItem>\n            <SelectItem value=\"delivered\">Delivered</SelectItem>\n            <SelectItem value=\"closed\">Closed</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={sortBy} onValueChange={setSortBy}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\" data-testid=\"select-sort-by\">\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"newest\">Newest First</SelectItem>\n            <SelectItem value=\"oldest\">Oldest First</SelectItem>\n            <SelectItem value=\"name\">Name A-Z</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Orders List */}\n      <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n        {filteredOrders.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            No orders found matching your criteria\n          </div>\n        ) : (\n          filteredOrders.map((order) => (\n            <Card\n              key={order.id}\n              className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                selectedOrderId === order.id ? 'ring-2 ring-primary' : ''\n              }`}\n              onClick={() => onSelectOrder(order.id)}\n              data-testid={`order-card-${order.orderId}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-semibold text-foreground\">\n                      {order.orderId}\n                    </span>\n                    <Badge className={getStatusColor(order.status)}>\n                      {getStatusLabel(order.status)}\n                    </Badge>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDistance(new Date(order.createdAt), new Date(), { addSuffix: true })}\n                  </span>\n                </div>\n\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <User className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">{order.fullName}</span>\n                    <span className=\"text-muted-foreground\">({order.email})</span>\n                  </div>\n                  \n                  {order.company && (\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Building className=\"w-4 h-4\" />\n                      <span>{order.company}</span>\n                    </div>\n                  )}\n\n                  <div className=\"text-sm\">\n                    <span className=\"font-medium text-foreground\">Project:</span>{' '}\n                    {order.projectName}\n                  </div>\n\n                  <div className=\"text-sm\">\n                    <span className=\"font-medium text-foreground\">Type:</span>{' '}\n                    {getAutomationTypeLabel(order.automationType)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7463},"client/src/components/animations/workflow-bg.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\nexport default function WorkflowBackground() {\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    const svg = svgRef.current;\n    if (!svg) return;\n\n    // Add animation classes to paths after mount\n    const paths = svg.querySelectorAll('path');\n    paths.forEach((path, index) => {\n      path.style.animationDelay = `${index * 0.5}s`;\n      path.classList.add('animate-pulse');\n    });\n\n    const circles = svg.querySelectorAll('circle');\n    circles.forEach((circle, index) => {\n      circle.style.animationDelay = `${index * 0.3}s`;\n      circle.classList.add('animate-pulse');\n    });\n  }, []);\n\n  return (\n    <div className=\"workflow-animation\">\n      <svg \n        ref={svgRef}\n        width=\"100%\" \n        height=\"100%\" \n        viewBox=\"0 0 1200 600\" \n        className=\"absolute inset-0\"\n      >\n        <defs>\n          <linearGradient id=\"nodeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"hsl(217 91% 35%)\" stopOpacity=\"0.8\"/>\n            <stop offset=\"100%\" stopColor=\"hsl(262 83% 58%)\" stopOpacity=\"0.8\"/>\n          </linearGradient>\n        </defs>\n        \n        {/* Connection lines */}\n        <g stroke=\"url(#nodeGradient)\" strokeWidth=\"2\" fill=\"none\">\n          <path d=\"M100,200 Q300,150 500,200 T900,250\" />\n          <path d=\"M150,350 Q400,300 650,350 T1000,400\" />\n          <path d=\"M200,100 Q500,50 800,100\" />\n        </g>\n        \n        {/* Workflow nodes */}\n        <g fill=\"url(#nodeGradient)\">\n          <circle cx=\"100\" cy=\"200\" r=\"8\" />\n          <circle cx=\"500\" cy=\"200\" r=\"10\" />\n          <circle cx=\"900\" cy=\"250\" r=\"8\" />\n          <circle cx=\"150\" cy=\"350\" r=\"6\" />\n          <circle cx=\"650\" cy=\"350\" r=\"10\" />\n          <circle cx=\"1000\" cy=\"400\" r=\"8\" />\n        </g>\n      </svg>\n    </div>\n  );\n}\n","size_bytes":1855},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { georgianContent } from \"@/lib/georgian-content\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-foreground text-background py-12\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n          {/* Company Info */}\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"/>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold font-firago\">n8n ავტომატიზაცია</span>\n            </div>\n            <p className=\"text-background/80 mb-4 max-w-md font-firago\">\n              {georgianContent.footer.description}\n            </p>\n            <div className=\"flex space-x-4\">\n              {/* Social Icons */}\n              <a href=\"#\" className=\"w-10 h-10 bg-background/10 hover:bg-background/20 rounded-lg flex items-center justify-center transition-colors duration-200\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-background/10 hover:bg-background/20 rounded-lg flex items-center justify-center transition-colors duration-200\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4 font-firago\">{georgianContent.footer.quickLinks}</h3>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">{georgianContent.nav.home}</Link></li>\n              <li><Link href=\"/services\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">{georgianContent.nav.services}</Link></li>\n              <li><Link href=\"/about\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">{georgianContent.nav.about}</Link></li>\n              <li><Link href=\"/contact\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">{georgianContent.nav.contact}</Link></li>\n            </ul>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4 font-firago\">{georgianContent.footer.services}</h3>\n            <ul className=\"space-y-2\">\n              <li><Link href=\"/services\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">WhatsApp ბოტები</Link></li>\n              <li><Link href=\"/services\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">CRM ინტეგრაცია</Link></li>\n              <li><Link href=\"/services\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">ელფოსტის ავტომატიზაცია</Link></li>\n              <li><Link href=\"/services\" className=\"text-background/80 hover:text-background transition-colors duration-200 font-firago\">მონაცემების სინქრონიზაცია</Link></li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Copyright */}\n        <div className=\"border-t border-background/20 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-background/60 text-sm font-firago\">\n              {georgianContent.footer.copyright}\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-background/60 hover:text-background/80 text-sm transition-colors duration-200 font-firago\">{georgianContent.footer.privacy}</a>\n              <a href=\"#\" className=\"text-background/60 hover:text-background/80 text-sm transition-colors duration-200 font-firago\">{georgianContent.footer.terms}</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5590},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\nimport { georgianContent } from \"@/lib/georgian-content\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const navigation = [\n    { name: georgianContent.nav.home, href: \"/\" },\n    { name: georgianContent.nav.services, href: \"/services\" },\n    { name: georgianContent.nav.order, href: \"/order\" },\n    { name: georgianContent.nav.about, href: \"/about\" },\n    { name: georgianContent.nav.team, href: \"/team\" },\n    { name: georgianContent.nav.contact, href: \"/contact\" },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/80 backdrop-blur-lg border-b border-border\">\n      <nav className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex-shrink-0\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"/>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold font-firago\">n8n ავტომატიზაცია</span>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              {navigation.map((item) => (\n                <Link \n                  key={item.href}\n                  href={item.href} \n                  className={`relative group transition-colors duration-200 font-firago ${\n                    location === item.href \n                      ? 'text-primary' \n                      : 'text-foreground hover:text-primary'\n                  }`}\n                >\n                  {item.name}\n                  <span className={`absolute -bottom-1 left-0 h-0.5 bg-primary transition-all duration-300 ${\n                    location === item.href ? 'w-full' : 'w-0 group-hover:w-full'\n                  }`}></span>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"hidden md:block\">\n            <Button asChild className=\"font-firago\">\n              <Link href=\"/order\" data-testid=\"button-order-header\">\n                {georgianContent.hero.primaryCta}\n              </Link>\n            </Button>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <nav className=\"flex flex-col space-y-4 mt-8\">\n                  {navigation.map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      className={`text-lg font-medium transition-colors duration-200 font-firago ${\n                        location === item.href ? 'text-primary' : 'text-foreground hover:text-primary'\n                      }`}\n                      onClick={() => setIsOpen(false)}\n                    >\n                      {item.name}\n                    </Link>\n                  ))}\n                  <Button asChild className=\"mt-4 font-firago\">\n                    <Link href=\"/order\" onClick={() => setIsOpen(false)}>\n                      {georgianContent.hero.primaryCta}\n                    </Link>\n                  </Button>\n                </nav>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":4292},"client/src/components/order/order-wizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ProgressBar from \"./progress-bar\";\nimport { georgianContent } from \"@/lib/georgian-content\";\nimport { CheckCircle, Upload, Clock, AlertCircle } from \"lucide-react\";\n\nconst formSchema = z.object({\n  // Step 1: Project basics\n  fullName: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().optional(),\n  projectName: z.string().min(2, \"Project name must be at least 2 characters\"),\n  \n  // Step 2: Automation type\n  automationType: z.enum([\"whatsapp_chatbot\", \"crm_integration\", \"email_automation\", \"file_sync\", \"custom_workflow\"]),\n  customDescription: z.string().optional(),\n  \n  // Step 3: Integrations\n  integrations: z.array(z.string()).min(1, \"Please select at least one integration\"),\n  hasCredentials: z.record(z.boolean()).optional(),\n  \n  // Step 4: Files\n  files: z.array(z.any()).optional(),\n  exampleLink: z.string().url().optional().or(z.literal(\"\")),\n  \n  // Step 5: Timeline\n  deliverySpeed: z.enum([\"standard\", \"fast\"]).optional(),\n  priorityNotes: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst TOTAL_STEPS = 6;\n\nexport default function OrderWizard() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [showTooltip, setShowTooltip] = useState<string | null>(null);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [orderId, setOrderId] = useState<string>(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      fullName: \"\",\n      email: \"\",\n      company: \"\",\n      projectName: \"\",\n      automationType: undefined,\n      customDescription: \"\",\n      integrations: [],\n      hasCredentials: {},\n      files: [],\n      exampleLink: \"\",\n      deliverySpeed: \"standard\",\n      priorityNotes: \"\",\n    },\n  });\n\n  // Auto-save to localStorage\n  useEffect(() => {\n    const subscription = form.watch((data) => {\n      localStorage.setItem('order-draft', JSON.stringify(data));\n    });\n    return () => subscription.unsubscribe();\n  }, [form]);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const saved = localStorage.getItem('order-draft');\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        Object.keys(data).forEach((key) => {\n          if (data[key] !== undefined && data[key] !== null) {\n            form.setValue(key as keyof FormData, data[key]);\n          }\n        });\n      } catch (error) {\n        console.error('Failed to load draft:', error);\n      }\n    }\n  }, [form]);\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const formData = new FormData();\n      \n      // Add form fields\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'files') return; // Handle files separately\n        if (key === 'integrations' || key === 'hasCredentials') {\n          formData.append(key, JSON.stringify(value));\n        } else if (value !== undefined && value !== null && value !== '') {\n          formData.append(key, String(value));\n        }\n      });\n\n      // Add files\n      uploadedFiles.forEach((file) => {\n        formData.append('files', file);\n      });\n\n      return apiRequest(\"POST\", \"/api/orders\", formData);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      setOrderId(result.orderId);\n      setIsSubmitted(true);\n      localStorage.removeItem('order-draft');\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      toast({\n        title: \"წარმატება!\",\n        description: georgianContent.order.success,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"შეცდომა\",\n        description: \"შეკვეთის გაგზავნისას მოხდა შეცდომა. გთხოვთ სცადოთ ხელახლა.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const nextStep = async () => {\n    const fieldsToValidate = getFieldsForStep(currentStep);\n    const isValid = await form.trigger(fieldsToValidate);\n    \n    if (isValid) {\n      setCurrentStep(prev => Math.min(prev + 1, TOTAL_STEPS));\n    }\n  };\n\n  const prevStep = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const onSubmit = (data: FormData) => {\n    createOrderMutation.mutate(data);\n  };\n\n  const getFieldsForStep = (step: number): (keyof FormData)[] => {\n    switch (step) {\n      case 1: return ['fullName', 'email', 'projectName'];\n      case 2: return ['automationType'];\n      case 3: return ['integrations'];\n      case 4: return [];\n      case 5: return [];\n      default: return [];\n    }\n  };\n\n  const handleAutomationTypeChange = (value: string) => {\n    form.setValue('automationType', value as any);\n    setShowTooltip(value);\n    \n    if (value !== 'custom_workflow') {\n      form.setValue('customDescription', '');\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setUploadedFiles(prev => [...prev, ...files]);\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const integrationOptions = [\n    \"Google Sheets\", \"Airtable\", \"HubSpot\", \"Stripe\", \"Meta/WhatsApp\", \n    \"Telegram\", \"Google Drive\", \"Dropbox\", \"MySQL\", \"PostgreSQL\", \"Webhook\"\n  ];\n\n  if (isSubmitted) {\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"text-center py-12\"\n      >\n        <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <CheckCircle className=\"w-12 h-12 text-green-600\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-foreground mb-4 font-firago\">\n          {georgianContent.order.success}\n        </h2>\n        <p className=\"text-lg text-muted-foreground mb-6 font-firago\">\n          {georgianContent.order.successFollow.replace(\"{ORDER_ID}\", orderId)}\n        </p>\n        <Button onClick={() => window.location.reload()} className=\"font-firago\">\n          ახალი შეკვეთა\n        </Button>\n      </motion.div>\n    );\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <ProgressBar currentStep={currentStep} totalSteps={TOTAL_STEPS} />\n\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStep}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            {/* Step 1: Project Basics */}\n            {currentStep === 1 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Project Basics</h3>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name *</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Full name\" \n                              {...field} \n                              data-testid=\"input-full-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"email\" \n                              placeholder=\"Email address\" \n                              {...field} \n                              data-testid=\"input-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"company\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Company Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Company (optional)\" \n                              {...field} \n                              data-testid=\"input-company\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"projectName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project Name *</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Project name\" \n                              {...field} \n                              data-testid=\"input-project-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 2: Automation Type */}\n            {currentStep === 2 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Select Automation Type</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"automationType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Type of Automation *</FormLabel>\n                        <Select \n                          onValueChange={handleAutomationTypeChange} \n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-automation-type\">\n                              <SelectValue placeholder=\"Select automation type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"whatsapp_chatbot\">WhatsApp/Messenger chatbot</SelectItem>\n                            <SelectItem value=\"crm_integration\">CRM integration</SelectItem>\n                            <SelectItem value=\"email_automation\">Email automation</SelectItem>\n                            <SelectItem value=\"file_sync\">File sync / ETL</SelectItem>\n                            <SelectItem value=\"custom_workflow\">Custom workflow - explain</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {showTooltip && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"mt-4 p-4 bg-muted/50 rounded-lg\"\n                    >\n                      <p className=\"text-sm text-muted-foreground font-firago\">\n                        {georgianContent.order.tooltips[showTooltip as keyof typeof georgianContent.order.tooltips]}\n                      </p>\n                    </motion.div>\n                  )}\n\n                  {form.watch('automationType') === 'custom_workflow' && (\n                    <motion.div\n                      initial={{ opacity: 0, height: 0 }}\n                      animate={{ opacity: 1, height: 'auto' }}\n                      className=\"mt-4\"\n                    >\n                      <FormField\n                        control={form.control}\n                        name=\"customDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Short Project Description *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Please describe your custom workflow requirements...\" \n                                className=\"h-24 resize-none\"\n                                {...field} \n                                data-testid=\"textarea-custom-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </motion.div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 3: Integrations */}\n            {currentStep === 3 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Integrations & Data</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"integrations\"\n                    render={() => (\n                      <FormItem>\n                        <FormLabel>Integrations (select multiple) *</FormLabel>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-4\">\n                          {integrationOptions.map((integration) => (\n                            <FormField\n                              key={integration}\n                              control={form.control}\n                              name=\"integrations\"\n                              render={({ field }) => (\n                                <FormItem\n                                  className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                >\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={field.value?.includes(integration)}\n                                      onCheckedChange={(checked) => {\n                                        return checked\n                                          ? field.onChange([...field.value, integration])\n                                          : field.onChange(\n                                              field.value?.filter(\n                                                (value) => value !== integration\n                                              )\n                                            )\n                                      }}\n                                      data-testid={`checkbox-${integration.toLowerCase()}`}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"text-sm font-normal\">\n                                    {integration}\n                                  </FormLabel>\n                                </FormItem>\n                              )}\n                            />\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 4: Files */}\n            {currentStep === 4 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Attach Files & Examples</h3>\n                  \n                  <div className=\"space-y-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Attach files (CSV, JSON, PNG, PDF)\n                      </label>\n                      <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <Upload className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                        <input\n                          type=\"file\"\n                          multiple\n                          accept=\".csv,.json,.png,.pdf,.jpg,.jpeg\"\n                          onChange={handleFileUpload}\n                          className=\"hidden\"\n                          id=\"file-upload\"\n                          data-testid=\"input-file-upload\"\n                        />\n                        <label\n                          htmlFor=\"file-upload\"\n                          className=\"cursor-pointer text-primary hover:text-primary/80\"\n                        >\n                          Click to upload files or drag and drop\n                        </label>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Max file size: 10MB\n                        </p>\n                      </div>\n\n                      {uploadedFiles.length > 0 && (\n                        <div className=\"mt-4 space-y-2\">\n                          {uploadedFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between bg-muted p-2 rounded\">\n                              <span className=\"text-sm\">{file.name}</span>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeFile(index)}\n                                data-testid={`button-remove-file-${index}`}\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"exampleLink\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Link to example data / docs (optional)</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"https://example.com/your-document\" \n                              {...field} \n                              data-testid=\"input-example-link\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 5: Timeline */}\n            {currentStep === 5 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Timeline & Priority</h3>\n                  \n                  <div className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"deliverySpeed\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Delivery Priority</FormLabel>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-3\">\n                              <input\n                                type=\"radio\"\n                                value=\"standard\"\n                                checked={field.value === \"standard\"}\n                                onChange={() => field.onChange(\"standard\")}\n                                className=\"w-4 h-4 text-primary\"\n                                data-testid=\"radio-standard\"\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"font-medium\">Standard — 7–14 days</span>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Regular delivery timeline with thorough testing\n                                </p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-3\">\n                              <input\n                                type=\"radio\"\n                                value=\"fast\"\n                                checked={field.value === \"fast\"}\n                                onChange={() => field.onChange(\"fast\")}\n                                className=\"w-4 h-4 text-primary\"\n                                data-testid=\"radio-fast\"\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <AlertCircle className=\"w-4 h-4 text-orange-500\" />\n                                  <span className=\"font-medium\">Fast — 3–5 days</span>\n                                  <Badge variant=\"secondary\">Priority</Badge>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Expedited delivery for urgent projects\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"priorityNotes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Priority notes (optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Any specific requirements or deadlines...\" \n                              className=\"h-24 resize-none\"\n                              {...field} \n                              data-testid=\"textarea-priority-notes\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 6: Review */}\n            {currentStep === 6 && (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Review & Submit</h3>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Project Details</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <p><strong>Name:</strong> {form.watch('fullName')}</p>\n                          <p><strong>Email:</strong> {form.watch('email')}</p>\n                          {form.watch('company') && <p><strong>Company:</strong> {form.watch('company')}</p>}\n                          <p><strong>Project:</strong> {form.watch('projectName')}</p>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Automation</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <p><strong>Type:</strong> {form.watch('automationType')?.replace('_', ' ')}</p>\n                          <p><strong>Integrations:</strong> {form.watch('integrations')?.join(', ')}</p>\n                          <p><strong>Priority:</strong> {form.watch('deliverySpeed')}</p>\n                          <p><strong>Files:</strong> {uploadedFiles.length} uploaded</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {form.watch('customDescription') && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Custom Description</h4>\n                        <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                          {form.watch('customDescription')}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Navigation Buttons */}\n        <div className=\"flex justify-between items-center pt-6\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            onClick={prevStep}\n            disabled={currentStep === 1}\n            data-testid=\"button-back\"\n          >\n            Back\n          </Button>\n          \n          {currentStep < TOTAL_STEPS ? (\n            <Button\n              type=\"button\"\n              onClick={nextStep}\n              data-testid=\"button-next\"\n            >\n              Next Step\n            </Button>\n          ) : (\n            <Button\n              type=\"submit\"\n              disabled={createOrderMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {createOrderMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":27537},"client/src/components/order/progress-bar.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface ProgressBarProps {\n  currentStep: number;\n  totalSteps: number;\n}\n\nexport default function ProgressBar({ currentStep, totalSteps }: ProgressBarProps) {\n  const progress = (currentStep / totalSteps) * 100;\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <span className=\"text-sm text-muted-foreground\">Progress</span>\n        <span className=\"text-sm text-muted-foreground\">\n          Step {currentStep} of {totalSteps}\n        </span>\n      </div>\n      <div className=\"w-full bg-muted rounded-full h-2 overflow-hidden\">\n        <motion.div \n          className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded-full\"\n          initial={{ width: 0 }}\n          animate={{ width: `${progress}%` }}\n          transition={{ duration: 0.5, ease: \"easeInOut\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":918},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nThis is a premium conversion-focused website for selling custom n8n automation services in Georgia. The application combines a modern React frontend with an Express.js backend to provide a complete business solution for automation service offerings. The site features Georgian language content, a multi-step order wizard, and an admin dashboard for managing customer requests.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and Georgian fonts (FiraGO)\n- **Animations**: Framer Motion for complex transitions and micro-interactions\n- **State Management**: TanStack Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\nThe frontend follows a component-based architecture with clear separation between pages, components, and utilities. Key design decisions include:\n- Georgian language support as primary requirement with custom fonts\n- Premium glass-card design aesthetic with gradients and micro-animations\n- Responsive design with mobile-first approach\n- Accessibility-focused component library usage\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Development**: Hot reload with Vite integration for full-stack development\n- **API Design**: RESTful endpoints with proper error handling and logging\n- **File Handling**: Multer for multi-part form uploads with file type validation\n- **Storage**: Modular storage interface currently using in-memory implementation\n\nThe backend uses a clean separation of concerns:\n- Route handlers for API endpoints\n- Service layer for business logic\n- Storage abstraction for data persistence\n- Middleware for request logging and error handling\n\n## Data Storage Solutions\n- **ORM**: Drizzle ORM configured for PostgreSQL\n- **Database**: PostgreSQL with Neon serverless integration\n- **Schema**: Type-safe database schema with enums for order status and automation types\n- **Current Implementation**: In-memory storage for development, with database schema ready for production\n\nThe data layer includes:\n- Order management with file attachments\n- User authentication system (prepared)\n- Structured order workflow with status tracking\n\n## Authentication and Authorization\n- **Prepared Infrastructure**: User schema and storage methods defined\n- **Session Management**: Configured for future implementation\n- **Admin Access**: Basic admin dashboard for order management\n\n## External Service Integrations\n- **Email Service**: SendGrid for transactional emails (order confirmations and notifications)\n- **Communication**: Slack Web API for real-time order notifications to admin team\n- **File Storage**: Local file system with multer (prepared for cloud storage migration)\n\nThe integration pattern uses environment variable configuration with graceful degradation when services are unavailable, ensuring the core application remains functional during development or when external services are down.","size_bytes":3240},"client/src/pages/team.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Phone, Mail, MessageCircle, Linkedin, Copy } from \"lucide-react\";\nimport { SiFacebook } from \"react-icons/si\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport giorgiPhoto from \"@assets/WhatsApp Image 2025-08-01 at 23.37.17_17286ac2 (29)_1758894082230.jpg\";\nimport tornikePhoto from \"@assets/1755198503835_1758901441709.png\";\n\nconst teamMembers = [\n  {\n    id: \"giorgi\",\n    name: \"გიორგი ნაცვლიშვილი\",\n    role: \"Business Development & Co-Founder\",\n    photo: giorgiPhoto,\n    phone: \"574099951\",\n    email: \"giorginatsvlishvili2010@gmail.com\",\n    linkedin: \"https://www.linkedin.com/in/giorgi-natsvlishvili-026186220/\",\n    facebook: \"https://www.facebook.com/giorgi.natsvlishvili.342482\",\n    description: \"ექსპერტი ბიზნეს პროცესების ანალიზისა და ავტომატიზაციის სტრატეგიების შემუშავებაში. ისარგებლოს მდიდარი გამოცდილებით კლიენტებთან მუშაობისა და ბიზნეს საჭიროებების იდენტიფიცირებაში.\",\n    expertise: [\"n8n Development\", \"API Integrations\", \"Workflow Automation\", \"Cloud Technologies\"],\n    experience: \"3+ წლის გამოცდილება\",\n    languages: [\"ქართული\", \"ინგლისური\", \"რუსული\"],\n    gradient: \"from-primary to-secondary\"\n  },\n  {\n    id: \"tornike\",\n    name: \"თორნიკე სვიმონიშვილი\",\n    role: \"n8n Developer & Co-Founder\",\n    photo: tornikePhoto,\n    phone: \"574201221\",\n    email: \"svimonishvilitoka@gmail.com\",\n    linkedin: \"https://www.linkedin.com/in/tornike-svimonishvili-150865289/\",\n    facebook: \"https://www.facebook.com/tornike.svimonishvili.12\",\n    description: \"გამოცდილი დეველოპერი ავტომატიზაციისა და ღრუბლოვანი ტექნოლოგიების სფეროში. სპეციალიზირებულია n8n workflow-ების შექმნაში და რთული ინტეგრაციების განხორციელებაში.\",\n    expertise: [\"Business Analysis\", \"Client Relations\", \"Strategy Development\", \"Project Management\"],\n    experience: \"4+ წლის გამოცდილება\",\n    languages: [\"ქართული\", \"ინგლისური\"],\n    gradient: \"from-secondary to-accent\"\n  }\n];\n\nexport default function Team() {\n  const { toast } = useToast();\n\n  const handleCopyPhone = async (phone: string) => {\n    try {\n      await navigator.clipboard.writeText(`+995${phone}`);\n      toast({\n        title: \"ნომერი დაკოპირდა\",\n        description: `+995${phone} დაკოპირდა`,\n      });\n    } catch (err) {\n      toast({\n        title: \"შეცდომა\",\n        description: \"ნომერის კოპირება ვერ მოხერხდა\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEmail = (email: string) => {\n    window.open(`mailto:${email}`, '_blank');\n  };\n\n  const handleWhatsApp = (phone: string) => {\n    window.open(`https://wa.me/995${phone}`, '_blank');\n  };\n\n  const handleLinkedIn = (linkedin: string) => {\n    window.open(linkedin, '_blank');\n  };\n\n  const handleFacebook = (facebook: string) => {\n    window.open(facebook, '_blank');\n  };\n\n  return (\n    <main className=\"pt-20\">\n      {/* Header */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6 font-firago\">\n              ჩვენი გუნდი\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              გაიცანით ჩვენი გუნდის წევრები - ექსპერტები, რომლებიც მზად არიან გადაწყვიტონ თქვენი ბიზნესის ავტომატიზაციის ყველა საჭიროება\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Team Members */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 justify-center max-w-6xl mx-auto\">\n            {teamMembers.map((member, index) => (\n              <motion.div\n                key={member.id}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n              >\n                <Card className=\"glass-card card-hover h-full\">\n                  <CardContent className=\"p-8\">\n                    {/* Profile Header */}\n                    <div className=\"text-center mb-6\">\n                      <div className=\"relative mb-4\">\n                        <img\n                          src={member.photo}\n                          alt={member.name}\n                          className=\"w-32 h-32 rounded-full mx-auto object-cover border-4 border-primary/20 shadow-lg\"\n                          data-testid={`img-${member.id}-photo`}\n                        />\n                        <div className={`absolute -bottom-2 -right-2 w-8 h-8 bg-gradient-to-r ${member.gradient} rounded-full border-4 border-background`}></div>\n                      </div>\n                      <h2 className=\"text-2xl font-bold text-foreground mb-2 font-firago\">\n                        {member.name}\n                      </h2>\n                      <p className=\"text-lg text-muted-foreground mb-3 font-firago\">\n                        {member.role}\n                      </p>\n                    </div>\n\n                    {/* Description */}\n                    <div className=\"mb-6\">\n                      <p className=\"text-muted-foreground leading-relaxed font-firago text-center\">\n                        {member.description}\n                      </p>\n                    </div>\n\n                    {/* Expertise */}\n                    <div className=\"mb-6\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-3 font-firago\">\n                        ექსპერტიზა\n                      </h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {member.expertise.map((skill, skillIndex) => (\n                          <Badge \n                            key={skillIndex} \n                            variant=\"outline\" \n                            className=\"font-firago text-xs\"\n                          >\n                            {skill}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    \n\n                    {/* Contact Information */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                        <Phone className=\"w-4 h-4 flex-shrink-0\" />\n                        <span className=\"font-firago\" data-testid={`text-${member.id}-phone`}>\n                          +995 {member.phone}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                        <Mail className=\"w-4 h-4 flex-shrink-0\" />\n                        <span className=\"font-firago text-sm break-all\" data-testid={`text-${member.id}-email`}>\n                          {member.email}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleCopyPhone(member.phone)}\n                        className=\"flex-1 min-w-0 font-firago\"\n                        data-testid={`button-copy-phone-${member.id}`}\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        ნომრის კოპირება\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleEmail(member.email)}\n                        className=\"flex-1 min-w-0 font-firago\"\n                        data-testid={`button-email-${member.id}`}\n                      >\n                        <Mail className=\"w-4 h-4 mr-2\" />\n                        ელ-ფოსტა\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"default\"\n                        onClick={() => handleWhatsApp(member.phone)}\n                        className=\"w-full bg-green-500 hover:bg-green-600 font-firago\"\n                        data-testid={`button-whatsapp-${member.id}`}\n                      >\n                        <MessageCircle className=\"w-4 h-4 mr-2\" />\n                        WhatsApp\n                      </Button>\n                    </div>\n\n                    {/* Social Media Links */}\n                    <div className=\"flex gap-2 mt-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleLinkedIn(member.linkedin)}\n                        className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white border-blue-600 font-firago\"\n                        data-testid={`button-linkedin-${member.id}`}\n                      >\n                        <Linkedin className=\"w-4 h-4 mr-2\" />\n                        LinkedIn\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleFacebook(member.facebook)}\n                        className=\"flex-1 bg-blue-800 hover:bg-blue-900 text-white border-blue-800 font-firago\"\n                        data-testid={`button-facebook-${member.id}`}\n                      >\n                        <SiFacebook className=\"w-4 h-4 mr-2\" />\n                        Facebook\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Company Values */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6 font-firago\">\n              ჩვენი ღირებულებები\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto font-firago\">\n              ჩვენი გუნდი ხელმძღვანელობს ღირებულებებით, რომლებიც განსაზღვრავს ჩვენს მიდგომას მუშაობისადმი\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[\n              {\n                title: \"ინოვაცია\",\n                description: \"ყოველთვის ვეძებთ ახალ და უკეთეს გზებს ავტომატიზაციის განსახორციელებლად\",\n                icon: \"🚀\"\n              },\n              {\n                title: \"ხარისხი\",\n                description: \"ყოველი პროექტი არის უმაღლესი ხარისხის და სრულწმოვნადაა შესრულებული\",\n                icon: \"⭐\"\n              },\n              {\n                title: \"მხარდაჭერა\",\n                description: \"24/7 მხარდაჭერით ვუზრუნველყოფთ ჩვენი კლიენტების წარმატებას\",\n                icon: \"🤝\"\n              }\n            ].map((value, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"glass-card card-hover text-center h-full\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-4xl mb-4\">{value.icon}</div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-3 font-firago\">\n                      {value.title}\n                    </h3>\n                    <p className=\"text-muted-foreground font-firago\">\n                      {value.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6 font-firago\">\n              მზად ხართ დაიწყოთ მუშაობა ჩვენთან?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto font-firago\">\n              დაგვიკავშირდით დღესვე და გავარკვიოთ ერთად, როგორ შეგიძლიათ გააუტომატუროთ თქვენი ბიზნეს პროცესები\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"font-firago\" data-testid=\"button-start-project\">\n                პროექტის დაწყება\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"font-firago\" data-testid=\"button-consultation\">\n                უფასო კონსულტაცია\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </main>\n  );\n}","size_bytes":15803}},"version":1}